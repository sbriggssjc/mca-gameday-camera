{
  "static_results": [
    {
      "file": "/home/scott/mca-gameday-camera/game_uploader.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "upload_to_drive",
          "names": [
            "upload_to_drive"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [
        {
          "name": "upload_game",
          "lineno": 11,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 2
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L33"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/admin_tools.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": null,
          "names": [
            "zipfile"
          ]
        }
      ],
      "functions": [
        {
          "name": "zip_paths",
          "lineno": 22,
          "docstring": "Zip the given paths into ``zip_path``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "export_training_bundle",
          "lineno": 36,
          "docstring": "Export a bundle of training data as a zip archive.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "backup_logs",
          "lineno": 45,
          "docstring": "Backup the training logs directory.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "clear_review_queue",
          "lineno": 54,
          "docstring": "Truncate the review queue file.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "reset_labels",
          "lineno": 61,
          "docstring": "Backup and truncate label files.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "summary",
          "lineno": 75,
          "docstring": "Print summary statistics about the training data.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 102,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L51",
        "print() found (prefer logging) at L58",
        "print() found (prefer logging) at L70",
        "print() found (prefer logging) at L72",
        "print() found (prefer logging) at L94",
        "print() found (prefer logging) at L95",
        "print() found (prefer logging) at L96",
        "print() found (prefer logging) at L97",
        "print() found (prefer logging) at L98",
        "print() found (prefer logging) at L99"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/generate_scouting_report.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": "collections",
          "names": [
            "Counter"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Iterable",
            "List"
          ]
        },
        {
          "module": "fpdf",
          "names": [
            "FPDF"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_rows",
          "lineno": 20,
          "docstring": "Return all rows in ``csv_path`` matching ``opponent``.",
          "typed": true,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "counter_percent",
          "lineno": 36,
          "docstring": "Return list of formatted lines sorted by count desc.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "analyze",
          "lineno": 45,
          "docstring": "Compute frequency counters for various metrics.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_text",
          "lineno": 84,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_report",
          "lineno": 125,
          "docstring": "Save report text to ``path`` or PDF if fpdf is available.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_args",
          "lineno": 139,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 149,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L13",
        "Broad except (Exception/BaseException) at L68",
        "print() found (prefer logging) at L161"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/training_workflow.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        }
      ],
      "functions": [
        {
          "name": "run_training",
          "lineno": 15,
          "docstring": "Invoke ``train_model.py`` to train on labeled clips.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "label_clips",
          "lineno": 20,
          "docstring": "Prompt the user to label clips located in ``manual_review/``.\n\nAlready labeled clips listed in ``labels.csv`` are skipped. New labels are\nappended to the CSV file with columns ``filepath`` and ``label``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 57,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L41",
        "print() found (prefer logging) at L54"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/ai_trainer.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": "play_recognizer",
          "names": [
            "load_playbook",
            "detect_play_attributes",
            "match_play"
          ]
        }
      ],
      "functions": [
        {
          "name": "extract_clips",
          "lineno": 23,
          "docstring": "Return a list of frame sequences of length ``clip_len`` from ``video_path``.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "auto_label",
          "lineno": 45,
          "docstring": "Generate play predictions and return ``(name, confidence, frame)`` per clip.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "interactive_review",
          "lineno": 56,
          "docstring": "Prompt user to accept or correct predictions.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_results",
          "lineno": 67,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "evaluate",
          "lineno": 73,
          "docstring": "Return precision and recall comparing predictions against ``label_path``.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 90,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L117",
        "print() found (prefer logging) at L138",
        "print() found (prefer logging) at L141"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/retrain_models.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torchvision",
          "names": [
            "datasets",
            "models",
            "transforms"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_confirmed_jerseys",
          "lineno": 8,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_confirmed_play_types",
          "lineno": 24,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "summarize_jersey_labels",
          "lineno": 40,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "summarize_play_labels",
          "lineno": 52,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "retrain_jersey_ocr",
          "lineno": 62,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "retrain_play_classifier",
          "lineno": 86,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 148,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L15",
        "Broad except (Exception/BaseException) at L31",
        "Broad except (Exception/BaseException) at L94",
        "print() found (prefer logging) at L45",
        "print() found (prefer logging) at L49",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L77",
        "print() found (prefer logging) at L79",
        "print() found (prefer logging) at L81",
        "print() found (prefer logging) at L95",
        "print() found (prefer logging) at L108",
        "print() found (prefer logging) at L118",
        "print() found (prefer logging) at L138",
        "print() found (prefer logging) at L145"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/film_dashboard.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Iterable",
            "List",
            "Tuple"
          ]
        },
        {
          "module": "email_alerts",
          "names": [
            "load_env",
            "send_email"
          ]
        },
        {
          "module": "fpdf",
          "names": [
            "FPDF"
          ]
        }
      ],
      "functions": [
        {
          "name": "read_ratings",
          "lineno": 24,
          "docstring": "Return list of (player, rating) from a CSV with two columns.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "collect_clips",
          "lineno": 41,
          "docstring": "Return sorted list of video clip paths in a directory.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "find_diagram",
          "lineno": 50,
          "docstring": "Return diagram image for a clip if present.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_pdf",
          "lineno": 63,
          "docstring": "Create a PDF summarizing ratings and listing clips.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "upload_to_drive",
          "lineno": 117,
          "docstring": "Upload file to Google Drive using rclone.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "email_to_coaches",
          "lineno": 124,
          "docstring": "Email the PDF to coach email addresses defined in a JSON file.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_args",
          "lineno": 149,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 161,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L16",
        "Broad except (Exception/BaseException) at L130",
        "print() found (prefer logging) at L133",
        "print() found (prefer logging) at L140",
        "print() found (prefer logging) at L168",
        "print() found (prefer logging) at L173",
        "print() found (prefer logging) at L175",
        "print() found (prefer logging) at L181"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/play_classifier.py",
      "imports": [
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torchvision",
          "names": [
            "models",
            "transforms"
          ]
        }
      ],
      "functions": [
        {
          "name": "classify_play",
          "lineno": 175,
          "docstring": "Classify a video clip into a play type using a pretrained model.\n\nParameters\n----------\nvideo_clip_path:\n    Path to the video clip to classify.\nmetadata_json_path:\n    Optional path to accompanying metadata JSON.\nmodel_path:\n    Path to the trained model weights.\nthreshold:\n    Confidence threshold below which a prediction will be flagged.\nlog_uncertain:\n    When ``True``, low-confidence predictions are logged and clips are\n    saved for manual review.\nlog_file:\n    CSV file where low-confidence predictions are appended.\nreview_dir:\n    Directory where low-confidence clips are copied.",
          "typed": true,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "main",
          "lineno": 283,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "PlayClassifier",
          "lineno": 34,
          "docstring": "Classifies sequences of frames for touchdown-like events.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 37,
              "docstring": "Load a YOLOv5 model.\n\nParameters\n----------\nmodel_path:\n    Path to the YOLOv5 model weights. ``torch.hub`` will be used\n    to fetch the model if ``model_path`` points to a known name\n    like ``yolov5s.pt``.\ndevice:\n    Device string understood by ``torch`` (e.g. ``\"cpu\"`` or\n    ``\"cuda\"``)."
            },
            {
              "name": "_detect_player",
              "lineno": 64,
              "docstring": "Run YOLOv5 on a single frame and return the largest box.\n\nReturns\n-------\n(x1, y1, x2, y2):\n    Coordinates of the detected player's bounding box. If no\n    player is detected, ``(-1, -1, -1, -1)`` is returned."
            },
            {
              "name": "classify_sequence",
              "lineno": 87,
              "docstring": "Analyze frames and detect events.\n\nParameters\n----------\nframes:\n    List of frames ordered in time.\nspeed_threshold:\n    Pixel distance per frame considered \"fast\".\nedge_fraction:\n    Fraction of the frame (0-1) considered near the edge.\n\nReturns\n-------\nList of tuples ``(event, frame_index, center)`` where ``event`` is\neither ``\"touchdown\"`` or ``\"exit\"``."
            },
            {
              "name": "classify_video",
              "lineno": 138,
              "docstring": "Load a video and classify it for events.\n\nParameters\n----------\nvideo_path:\n    Path to the video file.\nstride:\n    Use every ``stride``-th frame for analysis.\n**kwargs:\n    Additional keyword arguments forwarded to ``classify_sequence``."
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L24",
        "Broad except (Exception/BaseException) at L30",
        "Broad except (Exception/BaseException) at L277",
        "print() found (prefer logging) at L313",
        "print() found (prefer logging) at L317"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/run_gameday_highlight.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "generate_highlights",
          "names": [
            "generate"
          ]
        },
        {
          "module": "ai_tracking",
          "names": [
            "analyze_video"
          ]
        },
        {
          "module": "play_classifier",
          "names": [
            "classify_play"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 15,
          "docstring": null,
          "typed": true,
          "has_logging": true,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/clean_labels.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Tuple"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_entries",
          "lineno": 15,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "clean_entries",
          "lineno": 26,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "write_json",
          "lineno": 54,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 60,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L21"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/play_recommender.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List"
          ]
        }
      ],
      "functions": [
        {
          "name": "_load_playbook",
          "lineno": 12,
          "docstring": "Return playbook entries from :data:`PLAYBOOK_PATH`.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "recommend_play",
          "lineno": 28,
          "docstring": "Return top play recommendations.\n\nParameters\n----------\nrecent_plays:\n    List of recent play dictionaries. Each should include ``play_name`` and\n    ``success`` keys.\ndefense_look:\n    Detected defensive front, e.g. ``\"4-4\"`` or ``\"5-2\"``.\n\nReturns\n-------\nList[Dict[str, str]]\n    Up to three play suggestions sorted by highest score. Each dictionary\n    contains ``play_name``, ``wristband_code`` and a short ``reason``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L23"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/camera_test.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L6",
        "print() found (prefer logging) at L9",
        "print() found (prefer logging) at L14",
        "print() found (prefer logging) at L18",
        "print() found (prefer logging) at L22"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/stream_to_youtube.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "re"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "queue"
          ]
        },
        {
          "module": null,
          "names": [
            "socket"
          ]
        },
        {
          "module": "collections",
          "names": [
            "deque"
          ]
        },
        {
          "module": "urllib.parse",
          "names": [
            "urlparse"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "signal"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "shlex"
          ]
        },
        {
          "module": "env_loader",
          "names": [
            "load_env",
            "require"
          ]
        },
        {
          "module": null,
          "names": [
            "roster"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "ffmpeg_utils",
          "names": [
            "build_ffmpeg_args",
            "run_ffmpeg_command",
            "detect_encoder"
          ]
        },
        {
          "module": "config",
          "names": [
            "StreamConfig",
            "load_config"
          ]
        },
        {
          "module": "reportlab.lib.pagesizes",
          "names": [
            "letter"
          ]
        },
        {
          "module": "reportlab.pdfgen",
          "names": [
            "canvas"
          ]
        },
        {
          "module": null,
          "names": [
            "pytesseract"
          ]
        },
        {
          "module": null,
          "names": [
            "psutil"
          ]
        },
        {
          "module": "pydrive.auth",
          "names": [
            "GoogleAuth"
          ]
        },
        {
          "module": "pydrive.drive",
          "names": [
            "GoogleDrive"
          ]
        }
      ],
      "functions": [
        {
          "name": "ffmpeg_has_encoder",
          "lineno": 47,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "pick_h264_encoder",
          "lineno": 59,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "build_audio_filter",
          "lineno": 73,
          "docstring": "Returns a low-latency audio filter chain:\n  - volume: primary gain boost (in dB, default +8 dB)\n  - highpass: remove rumble/wind (default 120 Hz)\n  - acompressor: tame peaks (3:1 ratio, low threshold)\n  - alimiter: hard ceiling to prevent clipping (-1.0 dBTP)\n  - dynaudnorm (optional): gentle auto-normalization for speech/crowd\n\nTunable via env vars:\n  AUDIO_GAIN_DB   -> default 8    (use 6\u201312 for field mics)\n  AUDIO_HIGHPASS  -> default 120  (Hz)\n  AUDIO_MODE      -> \"speech\" | \"crowd\" | \"off\"\n                     \"speech\": adds light dynaudnorm\n                     \"crowd\":  stronger dynaudnorm\n                     \"off\":    no dynaudnorm (lowest latency)",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "build_ffmpeg_cmd",
          "lineno": 114,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "run_with_retries",
          "lineno": 213,
          "docstring": null,
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "_halve_bitrate",
          "lineno": 287,
          "docstring": "Return half of a bitrate string like '4500k'.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_run_rtmp_test",
          "lineno": 296,
          "docstring": "Run a short FFmpeg dry run to verify RTMP(S) connectivity.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "find_usb_microphone",
          "lineno": 323,
          "docstring": "Return ALSA identifier for a USB/R\u00d8DE microphone if present.\n\nParameters\n----------\ndefault_device: str\n    Fallback ALSA device string (e.g., \"hw:1,0\").",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "check_audio_input",
          "lineno": 342,
          "docstring": "Return True if audio device produces a non-silent signal.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "detect_volume_gain",
          "lineno": 381,
          "docstring": "Return gain (in dB) needed to reach target mean volume.\n\nRuns a short ffmpeg dry-run using the ``volumedetect`` filter to measure\nthe mean volume of the provided ALSA device. If successful, the difference\nbetween ``target_db`` and the measured value is returned. On failure, a\ndefault gain of ``2.5`` dB is used.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "ping_rtmp",
          "lineno": 425,
          "docstring": "Return True if the RTMP(S) endpoint is reachable.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "diagnose_rtmp_connection",
          "lineno": 439,
          "docstring": "Diagnose DNS and TCP connectivity to the RTMP(S) host.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "abort_stream",
          "lineno": 470,
          "docstring": "Print a summary report and exit.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "handle_ffmpeg_crash",
          "lineno": 486,
          "docstring": "Log crash details, back off, and track restart attempts.",
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "start_ffmpeg_process",
          "lineno": 541,
          "docstring": "Starts and returns a new subprocess.Popen for the FFmpeg command.",
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "handle_ffmpeg_crash_old",
          "lineno": 557,
          "docstring": "Log crash details, back off, and track restart attempts.",
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "is_ffmpeg_alive",
          "lineno": 586,
          "docstring": "Return True if the given FFmpeg process is running.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "monitor_audio_level",
          "lineno": 592,
          "docstring": "Sample the audio device every 10s and update ``AUDIO_LEVEL_DB``.\n\nA warning is logged and printed if the mean volume over the 10s window is\nbelow ``threshold_db``.  Each warning is appended to ``silence_log.txt``.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "system_monitor",
          "lineno": 645,
          "docstring": "Log CPU (and GPU if available) usage periodically.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "unique_path",
          "lineno": 677,
          "docstring": "Return a unique file path by appending a counter if needed.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "validate_rtmp_url",
          "lineno": 703,
          "docstring": "Basic validation for RTMP(S) URLs.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mask_stream_url",
          "lineno": 709,
          "docstring": "Return the stream URL with the secret key portion hidden.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_compliance_report",
          "lineno": 714,
          "docstring": "Create a compliance summary CSV and optional PDF.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "open_writer",
          "lineno": 774,
          "docstring": "Open an MP4 writer, falling back to MJPG if needed.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "draw_label",
          "lineno": 784,
          "docstring": "Draw text with a black background rectangle for contrast.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "overlay_info",
          "lineno": 806,
          "docstring": "Overlay time, LIVE label, frame counter, scoreboard, and audio meter.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "preprocess_frame",
          "lineno": 837,
          "docstring": "Rotate portrait frames and resize to the target resolution.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "extract_roi_text",
          "lineno": 846,
          "docstring": "Return OCR text from the given ROI.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "read_scoreboard",
          "lineno": 855,
          "docstring": "Read clock, home score and away score from the frame.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_clock",
          "lineno": 877,
          "docstring": "Return the clock time in seconds or None if invalid.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_log_ffmpeg_errors",
          "lineno": 885,
          "docstring": "Stream FFmpeg stderr output in real time and monitor bitrate.",
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "launch_ffmpeg",
          "lineno": 936,
          "docstring": "Start an FFmpeg process configured for streaming with tuned settings.\n\nIf ``retry`` is True and startup fails with common RTMP errors, the\nfunction retries once with a reduced bitrate and forced IPv4 reconnect.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "restart_ffmpeg",
          "lineno": 1071,
          "docstring": "Restart the FFmpeg process if the stream stalls.",
          "typed": true,
          "has_logging": true,
          "raises": 1
        },
        {
          "name": "initialize_camera",
          "lineno": 1129,
          "docstring": "Attempt to open a camera with the given settings.\n\nReturns the ``cv2.VideoCapture`` object if successful, otherwise ``None``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "initialize_camera_path",
          "lineno": 1151,
          "docstring": "Attempt to open cameras using /dev/video* paths.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "print_available_cameras",
          "lineno": 1172,
          "docstring": "Print a list of available video devices for debugging.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 1190,
          "docstring": null,
          "typed": true,
          "has_logging": true,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L25",
        "Broad except (Exception/BaseException) at L30",
        "Broad except (Exception/BaseException) at L34",
        "Broad except (Exception/BaseException) at L55",
        "Broad except (Exception/BaseException) at L292",
        "Broad except (Exception/BaseException) at L496",
        "Broad except (Exception/BaseException) at L566",
        "Broad except (Exception/BaseException) at L660",
        "Broad except (Exception/BaseException) at L1091",
        "Broad except (Exception/BaseException) at L1096",
        "Broad except (Exception/BaseException) at L1110",
        "Broad except (Exception/BaseException) at L1182",
        "Broad except (Exception/BaseException) at L1855",
        "Broad except (Exception/BaseException) at L1872",
        "Broad except (Exception/BaseException) at L1899",
        "subprocess.Popen used (ensure logged, timeouts, and returns handled) at L248",
        "subprocess.Popen used (ensure logged, timeouts, and returns handled) at L545",
        "subprocess.Popen used (ensure logged, timeouts, and returns handled) at L1005",
        "Hardcoded video device path at L117",
        "Hardcoded video device path at L215",
        "Hardcoded RTMP(S) URL (prefer env var) at L505",
        "Hardcoded RTMP(S) URL (prefer env var) at L1275"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/email_alerts.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "smtplib"
          ]
        },
        {
          "module": "email.message",
          "names": [
            "EmailMessage"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Iterable"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_env",
          "lineno": 7,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "send_email",
          "lineno": 21,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L26",
        "print() found (prefer logging) at L43"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/roster.py",
      "imports": [],
      "functions": [
        {
          "name": "get_player_name",
          "lineno": 126,
          "docstring": "Return the player's name for a jersey number.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/assignment_analyzer.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": "ai_detector",
          "names": [
            "detect_jerseys"
          ]
        }
      ],
      "functions": [
        {
          "name": "analyze_clip",
          "lineno": 19,
          "docstring": "Process a video clip and append results to ``output``.\n\nThe current implementation calls :func:`ai_detector.detect_jerseys` on each\nframe and records which jerseys were seen at what time. Real movement\nanalysis and rating logic is not implemented because the required models and\nplaybook data are unavailable in this environment.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_assignments",
          "lineno": 52,
          "docstring": "Load a simple jersey->assignment mapping from JSON.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 62,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L58",
        "print() found (prefer logging) at L30"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/generate_coaching_report.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": "collections",
          "names": [
            "Counter",
            "defaultdict"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "gdrive_utils",
          "names": [
            "_get_drive",
            "_ensure_folder"
          ]
        },
        {
          "module": "fpdf",
          "names": [
            "FPDF"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        }
      ],
      "functions": [
        {
          "name": "parse_time",
          "lineno": 22,
          "docstring": "Return seconds from game start for ``quarter`` and ``clock``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "clip_duration",
          "lineno": 32,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "organize_clips",
          "lineno": 42,
          "docstring": "Copy clips into ``out_dir/label`` folders.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_report",
          "lineno": 61,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_pdf",
          "lineno": 86,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "compute_statistics",
          "lineno": 97,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "upload_to_drive",
          "lineno": 148,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 186,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L11",
        "Broad except (Exception/BaseException) at L16",
        "Broad except (Exception/BaseException) at L28"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/youtube_livestream.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "platform"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ]
        },
        {
          "module": "ffmpeg_utils",
          "names": [
            "build_ffmpeg_args"
          ]
        },
        {
          "module": "config",
          "names": [
            "StreamConfig",
            "load_config"
          ]
        },
        {
          "module": "google.auth.transport.requests",
          "names": [
            "Request"
          ]
        },
        {
          "module": "google.oauth2.credentials",
          "names": [
            "Credentials"
          ]
        },
        {
          "module": "google_auth_oauthlib.flow",
          "names": [
            "InstalledAppFlow"
          ]
        },
        {
          "module": "googleapiclient.discovery",
          "names": [
            "build"
          ]
        },
        {
          "module": "googleapiclient.errors",
          "names": [
            "HttpError"
          ]
        }
      ],
      "functions": [
        {
          "name": "authenticate_youtube",
          "lineno": 21,
          "docstring": "Authenticate user and return a YouTube service resource.\n\nParameters\n----------\nreset_auth:\n    If True, delete any cached token and trigger a new OAuth flow.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_stream",
          "lineno": 56,
          "docstring": "Create a liveStream and return its id and ingestion info.",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "create_broadcast",
          "lineno": 78,
          "docstring": "Create a liveBroadcast, bind it to the stream and return broadcast id.",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "get_stream_info",
          "lineno": 99,
          "docstring": "Fetch stream ingestion info for debugging.",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "run_ffmpeg",
          "lineno": 118,
          "docstring": "Launch FFmpeg using parameters from ``cfg``.\n\nParameters\n----------\ncfg:\n    Streaming configuration containing destination and encoder settings.\ntest:\n    If True, only print the command that would be executed.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "test_audio_capture",
          "lineno": 194,
          "docstring": "Record a short clip using ``arecord`` to verify audio input.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 210,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L36",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L74",
        "print() found (prefer logging) at L95",
        "print() found (prefer logging) at L171",
        "print() found (prefer logging) at L177",
        "print() found (prefer logging) at L184",
        "print() found (prefer logging) at L185",
        "print() found (prefer logging) at L187",
        "print() found (prefer logging) at L191",
        "print() found (prefer logging) at L198",
        "print() found (prefer logging) at L200",
        "print() found (prefer logging) at L202",
        "print() found (prefer logging) at L206",
        "print() found (prefer logging) at L207",
        "print() found (prefer logging) at L254",
        "print() found (prefer logging) at L255",
        "print() found (prefer logging) at L258",
        "print() found (prefer logging) at L259",
        "print() found (prefer logging) at L265",
        "print() found (prefer logging) at L267",
        "subprocess.Popen used (ensure logged, timeouts, and returns handled) at L175",
        "Hardcoded video device path at L132"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/diagnostics.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "glob"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "re"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "psutil"
          ]
        }
      ],
      "functions": [
        {
          "name": "check_camera",
          "lineno": 37,
          "docstring": "Verify that a camera exists and can capture one frame.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "check_microphone",
          "lineno": 57,
          "docstring": "Measure audio RMS level using ffmpeg.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "system_usage",
          "lineno": 94,
          "docstring": "Return CPU and GPU usage percentages.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "board_temp",
          "lineno": 116,
          "docstring": "Read Jetson board temperature in Celsius.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "stream_key_present",
          "lineno": 129,
          "docstring": "Check if a stream key is available via environment variables.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "print_result",
          "lineno": 138,
          "docstring": null,
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 142,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L24",
        "Broad except (Exception/BaseException) at L29",
        "Broad except (Exception/BaseException) at L82",
        "Broad except (Exception/BaseException) at L108",
        "Broad except (Exception/BaseException) at L124",
        "Hardcoded video device path at L37",
        "Hardcoded video device path at L143"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/generate_install_plan.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Tuple"
          ]
        },
        {
          "module": "fpdf",
          "names": [
            "FPDF"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_rows",
          "lineno": 17,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "average_dict",
          "lineno": 32,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "top_plays",
          "lineno": 36,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "plays_allowed",
          "lineno": 52,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_patterns",
          "lineno": 73,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "read_notes",
          "lineno": 98,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_plan",
          "lineno": 105,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_args",
          "lineno": 136,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 147,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L10",
        "Broad except (Exception/BaseException) at L44",
        "Broad except (Exception/BaseException) at L62",
        "Broad except (Exception/BaseException) at L80",
        "print() found (prefer logging) at L169"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/ai_performance_dashboard.py",
      "imports": [
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "streamlit"
          ]
        },
        {
          "module": null,
          "names": [
            "pandas"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_json",
          "lineno": 13,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 21,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L17"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/run_gameday.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "requests"
          ]
        }
      ],
      "functions": [
        {
          "name": "_run",
          "lineno": 16,
          "docstring": "Run ``cmd`` and raise ``CalledProcessError`` on failure.",
          "typed": true,
          "has_logging": true,
          "raises": 1
        },
        {
          "name": "_send_webhook",
          "lineno": 24,
          "docstring": "Post ``msg`` to WEBHOOK_URL if defined.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "parse_args",
          "lineno": 37,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 53,
          "docstring": null,
          "typed": true,
          "has_logging": true,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/play_recognizer.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_playbook",
          "lineno": 37,
          "docstring": "Load playbook JSON as a list of :class:`PlaybookEntry`.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "detect_play_attributes",
          "lineno": 60,
          "docstring": "Detect formation, direction and play type from frames.\n\nThis is a heuristic placeholder using optical flow for direction. The\nreturned ``mean_flow`` represents the average horizontal optical flow and\ncan be used to compare clips for training or calibration purposes.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "match_play",
          "lineno": 94,
          "docstring": "Return best matching play name and confidence score.\n\nTraining data can optionally provide a ``mean_flow`` value for each play\nwhich is used to slightly bias the matching confidence toward similar\nmovement patterns.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "analyze_video",
          "lineno": 136,
          "docstring": "Analyze a video, returning a list of detected plays.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "write_results",
          "lineno": 186,
          "docstring": "Append play recognition results to ``path`` in CSV or JSON format.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_training_data",
          "lineno": 224,
          "docstring": "Load practice training data if available.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "summarize_results",
          "lineno": 245,
          "docstring": "Return a simple frequency count of plays.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 253,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "PlaybookEntry",
          "lineno": 14,
          "docstring": "Single playbook entry with key attributes.",
          "methods": []
        },
        {
          "name": "PlayResult",
          "lineno": 24,
          "docstring": "Result of play recognition for one video segment.",
          "methods": []
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L240",
        "print() found (prefer logging) at L275"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/auto_tracker.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Tuple"
          ]
        },
        {
          "module": "ultralytics",
          "names": [
            "YOLO"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "AutoTracker",
          "lineno": 14,
          "docstring": "Crop frames around the main action using YOLOv8.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 17,
              "docstring": null
            },
            {
              "name": "track",
              "lineno": 22,
              "docstring": "Return crop (x, y, w, h) focused on detected players."
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L10"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/run_uploaded_film.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "manual_video_processor",
          "names": [
            "process_uploaded_game_film"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 21,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L16",
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L74",
        "print() found (prefer logging) at L82"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/motion_detector.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [
        {
          "name": "format_time",
          "lineno": 6,
          "docstring": "Return time in HH:MM:SS format.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "detect_motion",
          "lineno": 14,
          "docstring": "Detect high motion segments in a video.\n\nParameters\n----------\nvideo_path: str\n    Path to video file.\nmotion_threshold: float\n    Average pixel difference (0-255) to trigger motion detection.\nmin_duration: float\n    Minimum duration of motion segment to record in seconds.\n\nReturns\n-------\nlist of tuple(float, float)\n    List of (start_seconds, end_seconds) for detected motion segments.",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "main",
          "lineno": 75,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L84"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/sync_to_drive.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "pydrive.auth",
          "names": [
            "GoogleAuth"
          ]
        },
        {
          "module": "pydrive.drive",
          "names": [
            "GoogleDrive"
          ]
        }
      ],
      "functions": [
        {
          "name": "upload_files",
          "lineno": 9,
          "docstring": "Upload the given files to the provided Drive folder.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "main",
          "lineno": 28,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L25",
        "print() found (prefer logging) at L36",
        "print() found (prefer logging) at L41"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/generate_highlights.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "collections",
          "names": [
            "deque"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": "scoreboard_reader",
          "names": [
            "ScoreboardReader",
            "ScoreboardState"
          ]
        }
      ],
      "functions": [
        {
          "name": "open_writer",
          "lineno": 11,
          "docstring": "Open H.264 writer, fallback to MJPG if necessary.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_clock",
          "lineno": 21,
          "docstring": "Convert MM:SS string to seconds.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate",
          "lineno": 30,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "main",
          "lineno": 88,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L26"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/practice_trainer.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "re"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "play_recognizer",
          "names": [
            "load_playbook"
          ]
        }
      ],
      "functions": [
        {
          "name": "parse_play_name",
          "lineno": 13,
          "docstring": "Return play name from a clip filename.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "analyze_clip",
          "lineno": 20,
          "docstring": "Compute simple motion features for a video clip.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 62,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L89",
        "print() found (prefer logging) at L91"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/ffmpeg_utils.py",
      "imports": [
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Optional",
            "Tuple"
          ]
        }
      ],
      "functions": [
        {
          "name": "detect_encoder",
          "lineno": 7,
          "docstring": "Detect and return a usable H.264 encoder.\n\nPreference order:\n1. ``h264_v4l2m2m`` (Jetson hardware encoder)\n2. ``h264_nvmpi``\n3. ``libx264``\n\n``h264_omx`` is intentionally skipped due to reliability issues. A\n``RuntimeError`` is raised if no suitable encoder is found.\n\nWhen ``input_type`` is ``\"image2pipe\"`` (MJPEG frames piped via stdin),\nJetson hardware encoders output an empty stream. In this case ``libx264`` is\nforced if available.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "run_ffmpeg_command",
          "lineno": 49,
          "docstring": "Run an FFmpeg command with realtime stderr streaming.\n\nParameters\n----------\ncmd: List[str]\n    Command and arguments to execute.\ntimeout: int\n    Maximum number of seconds to allow the process to run.\n\nReturns\n-------\nTuple[int, str, str]\n    A tuple of ``(returncode, stdout, stderr)``.\n    ``stderr`` is fully captured even while being streamed.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "build_ffmpeg_args",
          "lineno": 95,
          "docstring": "Return a standardized FFmpeg command.\n\nParameters\n----------\nvideo_source:\n    Path or identifier for the video input. Use \"-\" when piping raw frames.\noutput_url:\n    Destination URL or file path.\naudio_device:\n    Identifier for the audio capture device. If ``None``, audio input is skipped\n    and a log message is emitted.\naudio_gain_db:\n    Gain to apply via the ``volume`` filter in decibels.\nresolution:\n    Target resolution (e.g. ``\"640x480\"``).\nframerate:\n    Target frames per second.\nvideo_codec:\n    Video encoder to use (defaults to ``h264_v4l2m2m``).\nvideo_is_pipe:\n    If True, treat ``video_source`` as raw frames on stdin.\nvideo_format:\n    Input format when ``video_is_pipe`` is False (default ``v4l2``).\nextra_args:\n    Additional FFmpeg arguments to append before the output target.\nforce_ipv4:\n    If True, append ``-rtmp_flags prefer_ipv4`` to prefer IPv4 RTMP.\ndiagnose_only:\n    When True, direct output to ``null`` for a non-networked dry run.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L42",
        "print() found (prefer logging) at L32",
        "subprocess.Popen used (ensure logged, timeouts, and returns handled) at L66"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/generate_coaches_cut_and_summary.py",
      "imports": [
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "collections",
          "names": [
            "Counter"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        }
      ],
      "functions": [
        {
          "name": "find_clips",
          "lineno": 8,
          "docstring": "Return a list of highlight clip paths.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_coaches_cut",
          "lineno": 17,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_summary",
          "lineno": 35,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 59,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L65"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/review_queue.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        }
      ],
      "functions": [
        {
          "name": "_load_queue",
          "lineno": 10,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "add_entry",
          "lineno": 21,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "queue_length",
          "lineno": 34,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L16"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/manual_video_processor.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Set",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "roster"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "zipfile"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": "ai_detector",
          "names": [
            "extract_jersey_number"
          ]
        },
        {
          "module": "play_recognizer",
          "names": [
            "load_playbook",
            "detect_play_attributes",
            "match_play"
          ]
        },
        {
          "module": "formation_detector",
          "names": [
            "detect_formation"
          ]
        },
        {
          "module": "scoreboard_reader",
          "names": [
            "ScoreboardReader"
          ]
        },
        {
          "module": "smart_auto_tracker",
          "names": [
            "SmartAutoTracker"
          ]
        },
        {
          "module": "gdrive_utils",
          "names": [
            "upload_to_google_drive"
          ]
        },
        {
          "module": "review_queue",
          "names": [
            "add_entry",
            "queue_length"
          ]
        }
      ],
      "functions": [
        {
          "name": "process_uploaded_game_film",
          "lineno": 27,
          "docstring": "Process an uploaded game film video file.\n\nParameters\n----------\nvideo_path:\n    Full path to the video file to process.\nprepare_retrain:\n    When True, create a training bundle after processing.",
          "typed": true,
          "has_logging": false,
          "raises": 2
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L67",
        "Broad except (Exception/BaseException) at L276",
        "print() found (prefer logging) at L196",
        "print() found (prefer logging) at L198",
        "print() found (prefer logging) at L223",
        "print() found (prefer logging) at L236",
        "print() found (prefer logging) at L238",
        "print() found (prefer logging) at L239",
        "print() found (prefer logging) at L240",
        "print() found (prefer logging) at L241",
        "print() found (prefer logging) at L244",
        "print() found (prefer logging) at L245",
        "print() found (prefer logging) at L247",
        "print() found (prefer logging) at L249",
        "print() found (prefer logging) at L250",
        "print() found (prefer logging) at L251",
        "print() found (prefer logging) at L253",
        "print() found (prefer logging) at L281",
        "print() found (prefer logging) at L295",
        "print() found (prefer logging) at L297"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/highlight_recorder.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "scoreboard_reader",
          "names": [
            "ScoreboardReader",
            "ScoreboardState"
          ]
        }
      ],
      "functions": [
        {
          "name": "open_writer",
          "lineno": 22,
          "docstring": "Open H.264 writer, fallback to MJPG if unavailable.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "add_overlay",
          "lineno": 33,
          "docstring": "Return path to a new clip with scoreboard overlay.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "monitor",
          "lineno": 60,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L27",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L63",
        "print() found (prefer logging) at L76",
        "print() found (prefer logging) at L90",
        "print() found (prefer logging) at L96",
        "print() found (prefer logging) at L111",
        "print() found (prefer logging) at L121",
        "print() found (prefer logging) at L128",
        "print() found (prefer logging) at L137",
        "print() found (prefer logging) at L138",
        "print() found (prefer logging) at L140",
        "print() found (prefer logging) at L145",
        "print() found (prefer logging) at L150",
        "print() found (prefer logging) at L162",
        "Hardcoded video device path at L60",
        "Hardcoded video device path at L156"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/formation_detector.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple",
            "Dict",
            "Any"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [
        {
          "name": "detect_formation",
          "lineno": 10,
          "docstring": "Classify offensive formation from bounding box geometry.\n\nParameters\n----------\nframe_image:\n    Full video frame.\nplayer_bboxes:\n    Detected player boxes as ``(x1, y1, x2, y2)``.\nplay_id:\n    Optional play identifier for the returned info dict.\nframe_id:\n    Optional frame identifier for the returned info dict.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/process_all_uploaded_videos.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "gdrive_utils",
          "names": [
            "upload_to_google_drive"
          ]
        },
        {
          "module": "manual_video_processor",
          "names": [
            "process_uploaded_game_film"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 26,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L36",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L48",
        "print() found (prefer logging) at L60",
        "print() found (prefer logging) at L63",
        "print() found (prefer logging) at L66",
        "print() found (prefer logging) at L68",
        "print() found (prefer logging) at L69",
        "print() found (prefer logging) at L70",
        "print() found (prefer logging) at L72",
        "print() found (prefer logging) at L74",
        "print() found (prefer logging) at L76",
        "print() found (prefer logging) at L78",
        "print() found (prefer logging) at L86"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/env_loader.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_env",
          "lineno": 4,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "require",
          "lineno": 14,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/ai_detector.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple",
            "Optional",
            "Dict"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "review_queue",
          "names": [
            "add_entry"
          ]
        },
        {
          "module": null,
          "names": [
            "pytesseract"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        }
      ],
      "functions": [
        {
          "name": "extract_jersey_number",
          "lineno": 22,
          "docstring": "Return jersey number string and OCR confidence.\n\nThe ``player_bbox`` is expected to be ``(x1, y1, x2, y2)``.\nIf no confident number is detected, ``(None, conf)`` is returned where\n``conf`` is the best confidence score found (or ``0.0``).",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "detect_jerseys",
          "lineno": 125,
          "docstring": "Return jersey numbers detected inside ``boxes`` on ``frame``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L15",
        "Broad except (Exception/BaseException) at L95"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/annotate_clip.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        }
      ],
      "functions": [
        {
          "name": "open_writer",
          "lineno": 18,
          "docstring": "Open H.264 writer, fallback to MJPG if unavailable.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "draw_annotation",
          "lineno": 31,
          "docstring": "Draw a single annotation on the given frame.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_annotations",
          "lineno": 56,
          "docstring": "Return mapping of frame number to annotations for the given clip.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "annotate_clip",
          "lineno": 69,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "main",
          "lineno": 104,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L112"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/smart_auto_tracker.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "ultralytics",
          "names": [
            "YOLO"
          ]
        },
        {
          "module": "deep_sort_realtime.deepsort_tracker",
          "names": [
            "DeepSort"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "TrackBox",
          "lineno": 35,
          "docstring": "Simple bounding box for a track.",
          "methods": [
            {
              "name": "update",
              "lineno": 43,
              "docstring": null
            },
            {
              "name": "as_tuple",
              "lineno": 46,
              "docstring": null
            }
          ]
        },
        {
          "name": "SmartAutoTracker",
          "lineno": 50,
          "docstring": "Track player clusters and return crop focusing on center of activity.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 53,
              "docstring": null
            },
            {
              "name": "_init_cv_tracks",
              "lineno": 69,
              "docstring": "Initialize OpenCV trackers for the given detections."
            },
            {
              "name": "_update_cv_tracks",
              "lineno": 80,
              "docstring": "Update OpenCV trackers."
            },
            {
              "name": "_detect",
              "lineno": 92,
              "docstring": null
            },
            {
              "name": "_tracks_union",
              "lineno": 100,
              "docstring": null
            },
            {
              "name": "track",
              "lineno": 110,
              "docstring": "Return crop (x, y, w, h) centered on detected player cluster."
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L20",
        "Broad except (Exception/BaseException) at L25",
        "Broad except (Exception/BaseException) at L30"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/reclassify_old_clips.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List"
          ]
        },
        {
          "module": "play_inference",
          "names": [
            "ToFloatNormalize",
            "load_model",
            "read_clip"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torchvision",
          "names": [
            "transforms"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_dataset",
          "lineno": 22,
          "docstring": "Load clip metadata from CSV.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_dataset",
          "lineno": 29,
          "docstring": "Write updated metadata back to the CSV.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "find_latest_model",
          "lineno": 40,
          "docstring": "Return newest ``.pt`` file in ``dir_path``.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "append_log",
          "lineno": 48,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "reclassify",
          "lineno": 62,
          "docstring": "Reclassify clips and update labels if predictions change.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "main",
          "lineno": 125,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L14",
        "Broad except (Exception/BaseException) at L55",
        "print() found (prefer logging) at L74",
        "print() found (prefer logging) at L99"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/postgame_review.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "collections",
          "names": [
            "Counter",
            "defaultdict"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List"
          ]
        },
        {
          "module": "play_classifier",
          "names": [
            "classify_play"
          ]
        }
      ],
      "functions": [
        {
          "name": "rerun_play_analysis",
          "lineno": 16,
          "docstring": "Re-analyze clips in ``folder`` with the latest model.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_performance_summary",
          "lineno": 78,
          "docstring": "Return per-player performance stats from ``plays``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "suggest_practice_focus",
          "lineno": 114,
          "docstring": "Return weekly practice recommendations.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 141,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L35",
        "Broad except (Exception/BaseException) at L70",
        "print() found (prefer logging) at L20",
        "print() found (prefer logging) at L165",
        "print() found (prefer logging) at L166"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/smart_crop_stream.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "ffmpeg_utils",
          "names": [
            "build_ffmpeg_args",
            "detect_encoder"
          ]
        },
        {
          "module": "queue",
          "names": [
            "Queue",
            "Full"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": "smart_auto_tracker",
          "names": [
            "SmartAutoTracker"
          ]
        },
        {
          "module": "upload_to_drive",
          "names": [
            "upload_to_drive"
          ]
        }
      ],
      "functions": [
        {
          "name": "upload_after_stream",
          "lineno": 28,
          "docstring": "Upload ``video_path`` to Google Drive once streaming finishes.",
          "typed": true,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "load_env",
          "lineno": 43,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "ensure_ffmpeg",
          "lineno": 55,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "log_ffmpeg_stderr",
          "lineno": 62,
          "docstring": "Continuously read and print FFmpeg stderr.",
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "build_ffmpeg_command",
          "lineno": 72,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 102,
          "docstring": null,
          "typed": true,
          "has_logging": true,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "subprocess.Popen used (ensure logged, timeouts, and returns handled) at L157"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/build_highlight_dataset.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "re"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        }
      ],
      "functions": [
        {
          "name": "parse_filename",
          "lineno": 8,
          "docstring": "Parse highlight filename into metadata.\n\nExpected format is ``PREFIX_PLAYER_PLAYTYPE_Q<quarter>_<time>.mp4`` where\n``time`` is ``05m12s``. Additional underscores in the play type are\nconverted to spaces.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "build_dataset",
          "lineno": 33,
          "docstring": "Copy clips from ``src_dir`` into ``dest_dir`` and write metadata CSV.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 52,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L60"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/list_hw_encoders.py",
      "imports": [
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 5,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L11",
        "print() found (prefer logging) at L15"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/dashboard.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "collections",
          "names": [
            "Counter"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List"
          ]
        },
        {
          "module": "play_recommender",
          "names": [
            "recommend_play"
          ]
        },
        {
          "module": null,
          "names": [
            "pandas"
          ]
        },
        {
          "module": null,
          "names": [
            "streamlit"
          ]
        },
        {
          "module": "fpdf",
          "names": [
            "FPDF"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_json",
          "lineno": 24,
          "docstring": "Load JSON data if the file exists.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "compute_player_counts",
          "lineno": 35,
          "docstring": "Return snap count per jersey number from metadata.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_pdf",
          "lineno": 46,
          "docstring": "Generate a simple summary PDF if FPDF is available.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "main",
          "lineno": 72,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L16",
        "Broad except (Exception/BaseException) at L31"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/drive_service_uploader.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Iterable"
          ]
        },
        {
          "module": "google.oauth2.service_account",
          "names": [
            "Credentials"
          ]
        },
        {
          "module": "googleapiclient.discovery",
          "names": [
            "build"
          ]
        },
        {
          "module": "googleapiclient.http",
          "names": [
            "MediaFileUpload"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_service",
          "lineno": 22,
          "docstring": "Return an authorized Drive service using the given credentials file.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "remote_file_exists",
          "lineno": 28,
          "docstring": "Return True if a file with ``name`` exists in ``folder_id``.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "upload_file",
          "lineno": 37,
          "docstring": "Upload ``path`` to the Drive ``folder_id``. Return True on success.",
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "sync_videos",
          "lineno": 49,
          "docstring": "Upload each file if it does not already exist remotely.",
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 62,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L77",
        "print() found (prefer logging) at L82"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/play_inference.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch",
          "names": [
            "nn"
          ]
        },
        {
          "module": "torchvision",
          "names": [
            "models",
            "transforms"
          ]
        }
      ],
      "functions": [
        {
          "name": "seconds_to_time",
          "lineno": 31,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "segment_video",
          "lineno": 38,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_model",
          "lineno": 55,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "read_clip",
          "lineno": 67,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "run_inference",
          "lineno": 87,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "main",
          "lineno": 125,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "ToFloatNormalize",
          "lineno": 18,
          "docstring": "Convert ``uint8`` tensor to float and normalize to ImageNet stats.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 21,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 26,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L13"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/coach_review_app.py",
      "imports": [
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "streamlit"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_json",
          "lineno": 18,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "append_json",
          "lineno": 26,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_ocr_entries",
          "lineno": 42,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_unknown_play_entries",
          "lineno": 50,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "jersey_tab",
          "lineno": 72,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "play_tab",
          "lineno": 105,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 137,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L22",
        "Broad except (Exception/BaseException) at L34",
        "Broad except (Exception/BaseException) at L66"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/coach_assistant.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List"
          ]
        },
        {
          "module": "llama_index",
          "names": [
            "VectorStoreIndex",
            "SimpleDirectoryReader",
            "ServiceContext",
            "Document"
          ]
        },
        {
          "module": null,
          "names": [
            "openai"
          ]
        },
        {
          "module": null,
          "names": [
            "pyttsx3"
          ]
        },
        {
          "module": null,
          "names": [
            "vosk"
          ]
        },
        {
          "module": null,
          "names": [
            "pyaudio"
          ]
        },
        {
          "module": "docx",
          "names": [
            "Document"
          ]
        }
      ],
      "functions": [
        {
          "name": "_load_documents",
          "lineno": 45,
          "docstring": "Load text documents from the provided paths.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "answer_question",
          "lineno": 69,
          "docstring": "Answer a question using local documents and GPT-4.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "_speak",
          "lineno": 89,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "listen_and_respond",
          "lineno": 98,
          "docstring": "Listen on microphone and respond via TTS.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 127,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L14",
        "Broad except (Exception/BaseException) at L22",
        "Broad except (Exception/BaseException) at L27",
        "Broad except (Exception/BaseException) at L33",
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L65",
        "print() found (prefer logging) at L91",
        "print() found (prefer logging) at L101",
        "print() found (prefer logging) at L109",
        "print() found (prefer logging) at L137"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/youtube_uploader.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "mimetypes"
          ]
        },
        {
          "module": "google.auth.transport.requests",
          "names": [
            "Request"
          ]
        },
        {
          "module": "google.oauth2.credentials",
          "names": [
            "Credentials"
          ]
        },
        {
          "module": "google_auth_oauthlib.flow",
          "names": [
            "InstalledAppFlow"
          ]
        },
        {
          "module": "googleapiclient.discovery",
          "names": [
            "build"
          ]
        },
        {
          "module": "googleapiclient.errors",
          "names": [
            "HttpError"
          ]
        },
        {
          "module": "googleapiclient.http",
          "names": [
            "MediaFileUpload"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_authenticated_service",
          "lineno": 17,
          "docstring": "Authenticate and return a YouTube service resource.",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "upload_video",
          "lineno": 40,
          "docstring": "Upload a video to YouTube and return the video id.",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "main",
          "lineno": 65,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L27",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L81",
        "print() found (prefer logging) at L83"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/stream_diagnostics.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "ffmpeg_utils",
          "names": [
            "build_ffmpeg_args"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_env",
          "lineno": 8,
          "docstring": "Load environment variables from a simple KEY=VALUE file.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "ensure_ffmpeg",
          "lineno": 21,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "test_stream",
          "lineno": 28,
          "docstring": "Send a short test pattern to the RTMP endpoint to verify connectivity.",
          "typed": true,
          "has_logging": false,
          "raises": 4
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/play_count_tracker.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Iterable",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "schedule"
          ]
        },
        {
          "module": "colorama",
          "names": [
            "Fore",
            "Style",
            "init"
          ]
        },
        {
          "module": "email_alerts",
          "names": [
            "load_env",
            "send_email"
          ]
        },
        {
          "module": "ai_detector",
          "names": [
            "detect_jerseys"
          ]
        },
        {
          "module": "google_sheets_uploader",
          "names": [
            "format_row",
            "upload_rows"
          ]
        },
        {
          "module": null,
          "names": [
            "roster"
          ]
        },
        {
          "module": "twilio.rest",
          "names": [
            "Client"
          ]
        },
        {
          "module": null,
          "names": [
            "pyttsx3"
          ]
        }
      ],
      "functions": [
        {
          "name": "summary_lines",
          "lineno": 30,
          "docstring": "Return formatted play count lines with player names.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "email_summary",
          "lineno": 44,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "send_sms_alert",
          "lineno": 56,
          "docstring": "Send a text message alert using Twilio if credentials are configured.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "manual_input_loop",
          "lineno": 72,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "ai_loop",
          "lineno": 115,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_args",
          "lineno": 147,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 157,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L48",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L69",
        "print() found (prefer logging) at L94",
        "print() found (prefer logging) at L98",
        "print() found (prefer logging) at L107",
        "print() found (prefer logging) at L124",
        "print() found (prefer logging) at L136",
        "print() found (prefer logging) at L168",
        "print() found (prefer logging) at L170",
        "print() found (prefer logging) at L191",
        "print() found (prefer logging) at L211",
        "print() found (prefer logging) at L213"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/play_tracker.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "smtplib"
          ]
        },
        {
          "module": null,
          "names": [
            "schedule"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": "email.message",
          "names": [
            "EmailMessage"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Iterable",
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "roster"
          ]
        }
      ],
      "functions": [
        {
          "name": "parse_args",
          "lineno": 20,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_jerseys",
          "lineno": 47,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "detect_jerseys",
          "lineno": 65,
          "docstring": "Placeholder jersey number detection.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "send_email",
          "lineno": 71,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 93,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "TODO/FIXME/HACK left in code at L67"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/highlight_dataset.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "HighlightClipDataset",
          "lineno": 15,
          "docstring": "Simple dataset for highlight video clips.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 18,
              "docstring": null
            },
            {
              "name": "__len__",
              "lineno": 29,
              "docstring": null
            },
            {
              "name": "_read_frames",
              "lineno": 32,
              "docstring": null
            },
            {
              "name": "__getitem__",
              "lineno": 50,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L10"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/train_play_classifier.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch",
          "names": [
            "nn"
          ]
        },
        {
          "module": "torch.utils.data",
          "names": [
            "DataLoader"
          ]
        },
        {
          "module": "torchvision",
          "names": [
            "models",
            "transforms"
          ]
        },
        {
          "module": "highlight_dataset",
          "names": [
            "HighlightClipDataset"
          ]
        }
      ],
      "functions": [
        {
          "name": "collate_batch",
          "lineno": 46,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "train_epoch",
          "lineno": 51,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 73,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "ToFloatNormalize",
          "lineno": 16,
          "docstring": "Convert ``uint8`` tensor to float and normalize to ImageNet stats.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 19,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 24,
              "docstring": null
            }
          ]
        },
        {
          "name": "PlayVideoDataset",
          "lineno": 29,
          "docstring": "Dataset returning clips and integer labels.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 32,
              "docstring": null
            },
            {
              "name": "__getitem__",
              "lineno": 40,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L69",
        "print() found (prefer logging) at L108",
        "print() found (prefer logging) at L112"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/gdrive_utils.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "pydrive.auth",
          "names": [
            "GoogleAuth"
          ]
        },
        {
          "module": "pydrive.drive",
          "names": [
            "GoogleDrive"
          ]
        }
      ],
      "functions": [
        {
          "name": "_get_drive",
          "lineno": 19,
          "docstring": "Authenticate and return a ``GoogleDrive`` instance.",
          "typed": true,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "_ensure_folder",
          "lineno": 53,
          "docstring": "Return folder ID for ``name``, creating it if necessary.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "upload_to_google_drive",
          "lineno": 67,
          "docstring": "Upload ``local_path`` to Google Drive.\n\nParameters\n----------\nlocal_path:\n    File path to upload.\ndrive_folder:\n    Optional Drive folder name to place the file in. The folder is created if\n    it does not exist.\n\nReturns\n-------\nbool\n    ``True`` on success, ``False`` otherwise.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L26",
        "print() found (prefer logging) at L27",
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L32",
        "print() found (prefer logging) at L41",
        "print() found (prefer logging) at L94",
        "print() found (prefer logging) at L97"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/google_sheets_uploader.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Iterable",
            "List"
          ]
        },
        {
          "module": "roster",
          "names": [
            "get_player_name"
          ]
        },
        {
          "module": null,
          "names": [
            "gspread"
          ]
        },
        {
          "module": "google.oauth2.service_account",
          "names": [
            "Credentials"
          ]
        }
      ],
      "functions": [
        {
          "name": "upload_rows",
          "lineno": 17,
          "docstring": "Append rows of data to the first worksheet of a spreadsheet.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "format_row",
          "lineno": 26,
          "docstring": "Return a row for uploading play counts including the player name.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/record_video.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": "upload_to_drive",
          "names": [
            "upload_to_drive"
          ]
        }
      ],
      "functions": [
        {
          "name": "open_writer",
          "lineno": 17,
          "docstring": "Attempt to open avc1 (H.264) writer and fallback to MJPG.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "record",
          "lineno": 28,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 2
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L22",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L50",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L60",
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L69",
        "print() found (prefer logging) at L71",
        "print() found (prefer logging) at L72",
        "Hardcoded video device path at L28"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/ai_tracking.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Dict"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "ultralytics",
          "names": [
            "YOLO"
          ]
        },
        {
          "module": "deep_sort_realtime.deepsort_tracker",
          "names": [
            "DeepSort"
          ]
        },
        {
          "module": null,
          "names": [
            "easyocr"
          ]
        }
      ],
      "functions": [
        {
          "name": "analyze_video",
          "lineno": 107,
          "docstring": "Analyze a video and save annotated output and metadata.",
          "typed": true,
          "has_logging": true,
          "raises": 1
        }
      ],
      "classes": [
        {
          "name": "Tracker",
          "lineno": 35,
          "docstring": "Wrapper around YOLOv8 model and DeepSORT tracker.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 38,
              "docstring": null
            },
            {
              "name": "_detect_players",
              "lineno": 45,
              "docstring": "Return detected bounding boxes as [x1, y1, x2, y2]."
            },
            {
              "name": "_ocr_number",
              "lineno": 54,
              "docstring": null
            },
            {
              "name": "process",
              "lineno": 70,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L25"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jersey_detector.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": "roster",
          "names": [
            "get_player_name"
          ]
        },
        {
          "module": null,
          "names": [
            "easyocr"
          ]
        }
      ],
      "functions": [
        {
          "name": "extract_key_frames",
          "lineno": 16,
          "docstring": "Return list of (frame_id, frame) every ``interval`` seconds.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "detect_numbers",
          "lineno": 36,
          "docstring": "Return list of jersey numbers with confidence from ``frame``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "append_log",
          "lineno": 54,
          "docstring": "Append ``rows`` to ``csv_path`` creating the file if needed.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "process_video",
          "lineno": 66,
          "docstring": "Detect jersey numbers in ``video_file`` and append to ``csv_path``.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "main",
          "lineno": 90,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L10",
        "print() found (prefer logging) at L87"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/update_player_stats.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Iterable"
          ]
        },
        {
          "module": "fpdf",
          "names": [
            "FPDF"
          ]
        }
      ],
      "functions": [
        {
          "name": "parse_clip_name",
          "lineno": 21,
          "docstring": "Return (label, player) parsed from ``filename``.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "tally_clips",
          "lineno": 32,
          "docstring": "Return stats keyed by player for all clips in ``directory``.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "read_grades",
          "lineno": 57,
          "docstring": "Return mapping of player->coach grade.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "append_stats",
          "lineno": 84,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "season_averages",
          "lineno": 110,
          "docstring": "Compute average stats per player across all games.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "generate_pdf",
          "lineno": 138,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_args",
          "lineno": 156,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 175,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L15",
        "Broad except (Exception/BaseException) at L71",
        "Broad except (Exception/BaseException) at L79",
        "Broad except (Exception/BaseException) at L125",
        "Broad except (Exception/BaseException) at L129"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/config.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "dataclasses"
          ]
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Any"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "yaml"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_config",
          "lineno": 36,
          "docstring": "Load configuration from YAML and apply CLI overrides.\n\nParameters\n----------\npath: str | None\n    Location of the YAML configuration file. If ``None`` or the file does\n    not exist, defaults are used.\nargs: argparse.Namespace\n    Parsed CLI arguments whose attributes override config values when set.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "StreamConfig",
          "lineno": 16,
          "docstring": "Central configuration for streaming parameters.",
          "methods": []
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L11",
        "Hardcoded RTMP(S) URL (prefer env var) at L23"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/predict_next_play.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": "collections",
          "names": [
            "Counter"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Union"
          ]
        }
      ],
      "functions": [
        {
          "name": "_parse_int",
          "lineno": 11,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_norm_form",
          "lineno": 18,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_similar_form",
          "lineno": 22,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "predict_play",
          "lineno": 28,
          "docstring": "Predict next play from scouting data.\n\nReturns top two play labels with percentages or a message string if data is\ninsufficient.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L14"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/install_firefox_esr.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "tarfile"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "requests"
          ]
        }
      ],
      "functions": [
        {
          "name": "log",
          "lineno": 22,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_latest_version",
          "lineno": 26,
          "docstring": "Return the latest Firefox ESR version string.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "download",
          "lineno": 39,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "extract",
          "lineno": 52,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 82,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L13",
        "print() found (prefer logging) at L23"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/scoreboard_reader.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Optional"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "pytesseract"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ScoreboardState",
          "lineno": 20,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ScoreboardReader",
          "lineno": 30,
          "docstring": "Detect or manually update scoreboard state.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 33,
              "docstring": null
            },
            {
              "name": "calibrate",
              "lineno": 49,
              "docstring": "Interactively select the scoreboard ROI."
            },
            {
              "name": "_save_state",
              "lineno": 54,
              "docstring": null
            },
            {
              "name": "_filter_digit",
              "lineno": 61,
              "docstring": "Filter common OCR digit mistakes."
            },
            {
              "name": "_manual_input",
              "lineno": 69,
              "docstring": "Background thread for manual scoreboard updates via console."
            },
            {
              "name": "update",
              "lineno": 97,
              "docstring": "Update state from frame using OCR if possible."
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L15",
        "Broad except (Exception/BaseException) at L58",
        "print() found (prefer logging) at L95"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/live_dashboard.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "flask",
          "names": [
            "Flask",
            "jsonify",
            "render_template",
            "request"
          ]
        },
        {
          "module": "predict_next_play",
          "names": [
            "predict_play"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_scouting",
          "lineno": 18,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_plays",
          "lineno": 37,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_score",
          "lineno": 48,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_score",
          "lineno": 59,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "index",
          "lineno": 64,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "api_plays",
          "lineno": 76,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "api_scouting",
          "lineno": 81,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "api_predict",
          "lineno": 86,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "api_score",
          "lineno": 97,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L28",
        "Broad except (Exception/BaseException) at L43",
        "Broad except (Exception/BaseException) at L54"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/generate_hudl_csv.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Iterable",
            "List",
            "Optional"
          ]
        },
        {
          "module": "roster",
          "names": [
            "get_player_name"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_rows",
          "lineno": 34,
          "docstring": "Load all rows from ``csv_path``.",
          "typed": true,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "format_players",
          "lineno": 48,
          "docstring": "Return formatted player list ``#num Name`` separated by semicolons.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "hudl_row",
          "lineno": 62,
          "docstring": "Convert input ``row`` to HUDL export fields.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "write_hudl_csv",
          "lineno": 90,
          "docstring": "Write ``rows`` to ``out_path`` in HUDL format.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "parse_args",
          "lineno": 102,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 115,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L13",
        "print() found (prefer logging) at L135"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/visual_player_tracker.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "roster"
          ]
        },
        {
          "module": "ultralytics",
          "names": [
            "YOLO"
          ]
        },
        {
          "module": null,
          "names": [
            "easyocr"
          ]
        }
      ],
      "functions": [
        {
          "name": "analyze_clip",
          "lineno": 175,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "PlayerState",
          "lineno": 33,
          "docstring": "Internal state for one player during a clip.",
          "methods": []
        },
        {
          "name": "VisualPlayerTracker",
          "lineno": 46,
          "docstring": "Track players using pose detection and simple heuristics.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 49,
              "docstring": null
            },
            {
              "name": "_ocr_number",
              "lineno": 53,
              "docstring": null
            },
            {
              "name": "_update_state",
              "lineno": 72,
              "docstring": null
            },
            {
              "name": "_update_contacts",
              "lineno": 97,
              "docstring": null
            },
            {
              "name": "_finalize_state",
              "lineno": 118,
              "docstring": null
            },
            {
              "name": "track_clip",
              "lineno": 128,
              "docstring": null
            },
            {
              "name": "save_metrics",
              "lineno": 166,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "Broad except (Exception/BaseException) at L26",
        "print() found (prefer logging) at L180"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/upload_to_drive.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Tuple"
          ]
        },
        {
          "module": "pydrive.auth",
          "names": [
            "GoogleAuth"
          ]
        },
        {
          "module": "pydrive.drive",
          "names": [
            "GoogleDrive"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_drive",
          "lineno": 29,
          "docstring": "Return an authenticated ``GoogleDrive`` instance.\n\nThe function stores credentials in :data:`TOKEN_FILE`. If running on a\nsystem without a graphical display (for example a Jetson used headless),\n``CommandLineAuth`` is used instead of ``LocalWebserverAuth``.",
          "typed": true,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "upload_to_drive",
          "lineno": 68,
          "docstring": "Upload ``file_path`` to Google Drive.\n\nParameters\n----------\nfile_path:\n    Path to the local file to upload.\nfolder_id:\n    Optional destination folder ID. If ``None`` the file is placed in the\n    Drive root.\ntitle:\n    Optional name for the uploaded file. Defaults to the local file name.\nReturns\n-------\nTuple[str, str]\n    The Drive file ID and the shareable view URL.",
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 105,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Broad except (Exception/BaseException) at L41",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L47",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L101",
        "print() found (prefer logging) at L135"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/train_model.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 13,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L16",
        "print() found (prefer logging) at L24"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/send_postgame_email.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "annotations"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "smtplib"
          ]
        },
        {
          "module": "email.message",
          "names": [
            "EmailMessage"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Iterable",
            "List"
          ]
        },
        {
          "module": "email_alerts",
          "names": [
            "load_env"
          ]
        }
      ],
      "functions": [
        {
          "name": "read_recipients",
          "lineno": 16,
          "docstring": "Return list of email addresses from a CSV with Name,Email columns.",
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "build_body",
          "lineno": 38,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "send_email",
          "lineno": 62,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "parse_args",
          "lineno": 110,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 140,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L97",
        "print() found (prefer logging) at L98",
        "print() found (prefer logging) at L99",
        "print() found (prefer logging) at L100",
        "print() found (prefer logging) at L101"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson_inference/__init__.py",
      "imports": [
        {
          "module": null,
          "names": [
            "jetson_utils"
          ]
        },
        {
          "module": "jetson_inference_python",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson/inference/__init__.py",
      "imports": [
        {
          "module": null,
          "names": [
            "jetson.utils"
          ]
        },
        {
          "module": "jetson_inference_python",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L12"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/python/Jetson/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/python/Jetson/Inference/__init__.py",
      "imports": [
        {
          "module": null,
          "names": [
            "jetson.utils"
          ]
        },
        {
          "module": "jetson_inference_python",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L12"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/depthnet_utils.py",
      "imports": [
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "depthBuffers",
          "lineno": 26,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "docstring": null
            },
            {
              "name": "Alloc",
              "lineno": 35,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "detectNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L43",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L73",
        "print() found (prefer logging) at L76"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/backgroundnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "backgroundNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "loadImage",
            "Log",
            "cudaAllocMapped",
            "cudaMemcpy",
            "cudaResize",
            "cudaOverlay"
          ]
        }
      ],
      "functions": [
        {
          "name": "replaceBackground",
          "lineno": 63,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Bare except at L44",
        "print() found (prefer logging) at L45"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/posenet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "poseNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L43",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L67",
        "print() found (prefer logging) at L70",
        "print() found (prefer logging) at L71",
        "print() found (prefer logging) at L72"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/segnet_utils.py",
      "imports": [
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped",
            "cudaToNumpy"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "segmentationBuffers",
          "lineno": 28,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 29,
              "docstring": null
            },
            {
              "name": "output",
              "lineno": 48,
              "docstring": null
            },
            {
              "name": "Alloc",
              "lineno": 56,
              "docstring": null
            },
            {
              "name": "ComputeStats",
              "lineno": 74,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L84",
        "print() found (prefer logging) at L85",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L88",
        "print() found (prefer logging) at L89",
        "print() found (prefer logging) at L93"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet-snap.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "detectNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "saveImage",
            "Log",
            "cudaAllocMapped",
            "cudaCrop",
            "cudaDeviceSynchronize"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L57",
        "print() found (prefer logging) at L58",
        "print() found (prefer logging) at L86",
        "print() found (prefer logging) at L91"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/my-recognition.py",
      "imports": [
        {
          "module": "jetson_inference",
          "names": [
            "imageNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "loadImage"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L51"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/segnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "segNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaOverlay",
            "cudaDeviceSynchronize",
            "Log"
          ]
        },
        {
          "module": "segnet_utils",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L48",
        "print() found (prefer logging) at L49"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/my-detection.py",
      "imports": [
        {
          "module": "jetson_inference",
          "names": [
            "detectNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Hardcoded video device path at L28"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/depthnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "depthNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaOverlay",
            "cudaDeviceSynchronize",
            "Log"
          ]
        },
        {
          "module": "depthnet_utils",
          "names": [
            "depthBuffers"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L49",
        "print() found (prefer logging) at L50"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/actionnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "actionNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaFont",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L41",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L67"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/examples/imagenet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "imageNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaFont",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L42",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L79"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/model.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "imageNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaFont",
            "cudaAllocMapped",
            "Log"
          ]
        },
        {
          "module": "utils",
          "names": [
            "reshape_model",
            "alert"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Model",
          "lineno": 37,
          "docstring": "Represents a classification / image tagging model with online training.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 41,
              "docstring": "Initialize the model"
            },
            {
              "name": "Classify",
              "lineno": 83,
              "docstring": "Run classification inference and return the results."
            },
            {
              "name": "Visualize",
              "lineno": 100,
              "docstring": "Visualize the results on an image."
            },
            {
              "name": "train",
              "lineno": 116,
              "docstring": "Training thread main loop (assuming dataset can change)"
            },
            {
              "name": "train_epoch",
              "lineno": 208,
              "docstring": "Train the model for one epoch."
            },
            {
              "name": "reshape",
              "lineno": 254,
              "docstring": "Reshape the model (during training) for a different number of classes."
            },
            {
              "name": "compute_accuracy",
              "lineno": 267,
              "docstring": "Computes the accuracy of predictions vs groundtruth"
            },
            {
              "name": "save_checkpoint",
              "lineno": 287,
              "docstring": "Save a PyTorch model checkpoint, and refresh ONNX/TensorRT if it has the best accuracy so far."
            },
            {
              "name": "export_onnx",
              "lineno": 301,
              "docstring": "Export the PyTorch model to ONNX."
            },
            {
              "name": "load_inference",
              "lineno": 328,
              "docstring": "Load the TensorRT model from ONNX."
            },
            {
              "name": "run",
              "lineno": 344,
              "docstring": "Training thread main loop"
            },
            {
              "name": "training_stats",
              "lineno": 356,
              "docstring": "Returns a dict containing epoch training progress, model metrics, and dataset statistics."
            },
            {
              "name": "classification_threshold",
              "lineno": 372,
              "docstring": "Returns the confidence threshold used during classification (inference)"
            },
            {
              "name": "classification_threshold",
              "lineno": 379,
              "docstring": "Sets the confidence threshold used during classification (inference)"
            },
            {
              "name": "classification_smoothing",
              "lineno": 389,
              "docstring": "Return the temporal smoothing factor used during classification (inference)"
            },
            {
              "name": "classification_smoothing",
              "lineno": 396,
              "docstring": "Return the temporal smoothing factor used during classification (inference)"
            },
            {
              "name": "Usage",
              "lineno": 406,
              "docstring": "Return help text for when the app is started with -h or --help"
            }
          ]
        }
      ],
      "issues": [
        "Bare except at L350",
        "print() found (prefer logging) at L96",
        "print() found (prefer logging) at L125",
        "print() found (prefer logging) at L183",
        "print() found (prefer logging) at L248",
        "print() found (prefer logging) at L295",
        "print() found (prefer logging) at L299",
        "print() found (prefer logging) at L305"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/dataset.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "queue"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "PIL"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaMemcpy",
            "saveImage"
          ]
        },
        {
          "module": "utils",
          "names": [
            "alert"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Dataset",
          "lineno": 38,
          "docstring": "Class for saving multi-label image tagging datasets.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 42,
              "docstring": "Create dataset object."
            },
            {
              "name": "__len__",
              "lineno": 84,
              "docstring": "Return the size of the dataset (the number of images)"
            },
            {
              "name": "__getitem__",
              "lineno": 90,
              "docstring": "Return (image, labels) tensors for training"
            },
            {
              "name": "record",
              "lineno": 117,
              "docstring": "Record the queue of incoming images."
            },
            {
              "name": "run",
              "lineno": 134,
              "docstring": "Run the dataset thread's main loop for recording incoming data."
            },
            {
              "name": "AddImage",
              "lineno": 144,
              "docstring": "Adds an image to the queue to be saved to the dataset."
            },
            {
              "name": "Upload",
              "lineno": 155,
              "docstring": null
            },
            {
              "name": "GetActiveTags",
              "lineno": 162,
              "docstring": "Return a comma-separated string of the currently active labels applied to images as they are recorded."
            },
            {
              "name": "SetActiveTags",
              "lineno": 168,
              "docstring": "Set the list of active labels (as a comma-separated or semicolon-separated string)\nthat will be applied to incoming images as they are recorded into the dataset."
            },
            {
              "name": "ApplyTags",
              "lineno": 179,
              "docstring": "Apply tag annotations to the image and save them to disk (by default, the active tags will be applied)"
            },
            {
              "name": "SaveTags",
              "lineno": 199,
              "docstring": "Flush the image tags to the JSON annotations file on disk."
            },
            {
              "name": "update_class_labels",
              "lineno": 209,
              "docstring": "Sync the list of class labels from the tag annotations."
            },
            {
              "name": "update_class_distribution",
              "lineno": 229,
              "docstring": "Update the class distribution and total tag count.\nTODO add optional 'tags' param to incremently add at runtime."
            }
          ]
        }
      ],
      "issues": [
        "Bare except at L141",
        "print() found (prefer logging) at L75",
        "print() found (prefer logging) at L157",
        "print() found (prefer logging) at L227",
        "TODO/FIXME/HACK left in code at L232"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/stream.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        },
        {
          "module": "model",
          "names": [
            "Model"
          ]
        },
        {
          "module": "dataset",
          "names": [
            "Dataset"
          ]
        },
        {
          "module": "utils",
          "names": [
            "alert"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Stream",
          "lineno": 34,
          "docstring": "Thread for streaming video and applying DNN inference",
          "methods": [
            {
              "name": "__init__",
              "lineno": 38,
              "docstring": "Create a stream from input/output video sources, along with DNN models."
            },
            {
              "name": "process",
              "lineno": 52,
              "docstring": "Capture one image from the stream, process it, and output it."
            },
            {
              "name": "run",
              "lineno": 74,
              "docstring": "Run the stream processing thread's main loop."
            },
            {
              "name": "usage",
              "lineno": 87,
              "docstring": "Return help text for when the app is started with -h or --help"
            }
          ]
        }
      ],
      "issues": [
        "Bare except at L81",
        "print() found (prefer logging) at L70"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/app.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "http"
          ]
        },
        {
          "module": null,
          "names": [
            "flask"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "werkzeug"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "stream",
          "names": [
            "Stream"
          ]
        },
        {
          "module": "utils",
          "names": [
            "rest_property",
            "rest_function",
            "alerts"
          ]
        }
      ],
      "functions": [
        {
          "name": "index",
          "lineno": 65,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_alerts",
          "lineno": 71,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "dataset_classes",
          "lineno": 75,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "dataset_active_tags",
          "lineno": 79,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "dataset_recording",
          "lineno": 83,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "dataset_upload",
          "lineno": 87,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "training_enabled",
          "lineno": 104,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "training_stats",
          "lineno": 108,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "classification_enabled",
          "lineno": 112,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "classification_confidence_threshold",
          "lineno": 116,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "classification_output_smoothing",
          "lineno": 120,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L91",
        "print() found (prefer logging) at L98"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/utils.py",
      "imports": [
        {
          "module": null,
          "names": [
            "flask"
          ]
        },
        {
          "module": null,
          "names": [
            "http"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": "torchvision.models.googlenet",
          "names": [
            "InceptionAux"
          ]
        }
      ],
      "functions": [
        {
          "name": "rest_property",
          "lineno": 32,
          "docstring": "Handle the boilerplate of getting/setting a REST JSON property.\nThis function handles GET and PUT requests for different datatypes.\n\nParameters:\n    object (object) -- the object that the attribute belongs to\n    attribute (str) -- the name of the attribute from the object\n    type (Type) -- type of the variable (int, float, str)\n    key (str) -- the key to use if this is a dict",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "rest_function",
          "lineno": 68,
          "docstring": "Handle the boilerplate of getting/setting a REST JSON function.\nThis function handles GET and PUT requests for different datatypes.\n\nParameters:\n    getter (function) -- function for getting the variable\n    setter (function) -- function for setting the variable (optional)\n    type (Type) -- type of the variable (int, float, str)\n    key (str) -- the key to use if this is a dict",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "alert",
          "lineno": 106,
          "docstring": "Log an alert that shows up on the webpage\n\nParameters:\n    message (str) -- the text string to show\n    level (str) -- 'error', 'success', or 'info'\n    category (str) -- unique category for supressing repetitive messages\n    duration (int) -- how long to show the alert (in milliseconds)\n    unique (bool) -- if true, ",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "alerts",
          "lineno": 129,
          "docstring": "Retrieve the alerts since the given timestamp (in milliseconds)",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "reshape_model",
          "lineno": 146,
          "docstring": "Reshape a model's output layers for the given number of classes",
          "typed": false,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L100",
        "print() found (prefer logging) at L152",
        "print() found (prefer logging) at L156",
        "print() found (prefer logging) at L160",
        "print() found (prefer logging) at L165",
        "print() found (prefer logging) at L169",
        "print() found (prefer logging) at L173",
        "print() found (prefer logging) at L177",
        "print() found (prefer logging) at L183",
        "print() found (prefer logging) at L184",
        "print() found (prefer logging) at L193",
        "print() found (prefer logging) at L194",
        "print() found (prefer logging) at L195",
        "print() found (prefer logging) at L198"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/model.py",
      "imports": [
        {
          "module": "jetson_inference",
          "names": [
            "imageNet",
            "detectNet",
            "segNet",
            "poseNet",
            "actionNet",
            "backgroundNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaFont",
            "cudaAllocMapped",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Model",
          "lineno": 27,
          "docstring": "Represents DNN models for classification, detection, pose, ect.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 31,
              "docstring": "Load the model, either from a built-in pre-trained model or from a user-provided model.\n\nParameters:\n\n    type (string) -- the type of the model (classification, detection, ect)\n    model (string) -- either a path to the model or name of the built-in model\n    labels (string) -- path to the model's labels.txt file (optional)\n    input_layer (string or dict) -- the model's input layer(s)\n    output_layer (string or dict) -- the model's output layers()"
            },
            {
              "name": "Process",
              "lineno": 91,
              "docstring": "Process an image with the model and return the results."
            },
            {
              "name": "Visualize",
              "lineno": 110,
              "docstring": "Visualize the results on an image."
            },
            {
              "name": "IsEnabled",
              "lineno": 138,
              "docstring": "Returns true if the model is enabled for processing, false otherwise."
            },
            {
              "name": "SetEnabled",
              "lineno": 144,
              "docstring": "Enable/disable processing of the model."
            },
            {
              "name": "Usage",
              "lineno": 151,
              "docstring": "Return help text for when the app is started with -h or --help"
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L67",
        "print() found (prefer logging) at L68"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/stream.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        },
        {
          "module": "model",
          "names": [
            "Model"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Stream",
          "lineno": 31,
          "docstring": "Thread for streaming video and applying DNN inference",
          "methods": [
            {
              "name": "__init__",
              "lineno": 35,
              "docstring": "Create a stream from input/output video sources, along with DNN models."
            },
            {
              "name": "process",
              "lineno": 64,
              "docstring": "Capture one image from the stream, process it, and output it."
            },
            {
              "name": "run",
              "lineno": 86,
              "docstring": "Run the stream processing thread's main loop."
            },
            {
              "name": "usage",
              "lineno": 97,
              "docstring": "Return help text for when the app is started with -h or --help"
            }
          ]
        }
      ],
      "issues": [
        "Bare except at L93",
        "print() found (prefer logging) at L82"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/app.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "flask"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "stream",
          "names": [
            "Stream"
          ]
        },
        {
          "module": "utils",
          "names": [
            "rest_property"
          ]
        }
      ],
      "functions": [
        {
          "name": "index",
          "lineno": 61,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/utils.py",
      "imports": [
        {
          "module": null,
          "names": [
            "flask"
          ]
        },
        {
          "module": null,
          "names": [
            "http"
          ]
        }
      ],
      "functions": [
        {
          "name": "rest_property",
          "lineno": 26,
          "docstring": "Handle the boilerplate of getting/setting a REST JSON property.\nThis function handles GET and PUT requests for different datatypes.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L48"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/app.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "http"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        },
        {
          "module": null,
          "names": [
            "warnings"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_auth"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "Input",
            "Output"
          ]
        },
        {
          "module": "dash.exceptions",
          "names": [
            "PreventUpdate"
          ]
        },
        {
          "module": "config",
          "names": [
            "config",
            "print_config"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        },
        {
          "module": "layout",
          "names": [
            "create_grid",
            "create_navbar",
            "create_alerts",
            "create_stream_dialog",
            "create_model_dialog",
            "create_actions_dialog"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [
        {
          "name": "on_refresh",
          "lineno": 76,
          "docstring": "Get the latest resources config from the server.\nThis can trigger updates to the clientside nav structure.",
          "typed": false,
          "has_logging": false,
          "raises": 2
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L85",
        "print() found (prefer logging) at L92",
        "print() found (prefer logging) at L132"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/config.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": null,
          "names": [
            "mergedeep"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_config",
          "lineno": 54,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "print_config",
          "lineno": 75,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L77",
        "TODO/FIXME/HACK left in code at L53"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/actions/alert.py",
      "imports": [
        {
          "module": "server",
          "names": [
            "Server",
            "Action",
            "EventFilter"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "BrowserAlert",
          "lineno": 6,
          "docstring": "Action that triggers browser alerts and supports event filtering.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 10,
              "docstring": null
            },
            {
              "name": "on_event",
              "lineno": 13,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/model.py",
      "imports": [
        {
          "module": "jetson_inference",
          "names": [
            "imageNet",
            "detectNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaFont",
            "Log"
          ]
        },
        {
          "module": "collections",
          "names": [
            "deque"
          ]
        },
        {
          "module": "pprint",
          "names": [
            "pprint"
          ]
        },
        {
          "module": "time",
          "names": [
            "time"
          ]
        },
        {
          "module": "server",
          "names": [
            "Event"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Model",
          "lineno": 32,
          "docstring": "Represents DNN models for classification, detection, segmentation, ect.\nThese can be either built-in models or user-provided / user-trained.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 37,
              "docstring": "Load the model, either from a built-in pre-trained model or from a user-provided model.\n\nParameters:\n\n    server (Server) -- the backend server instance\n    name (string) -- the name of the model\n    type (string) -- the type of the model (classification, detection, ect)\n    model (string) -- either a path to the model or name of the built-in model\n    labels (string) -- path to the model's labels.txt file (optional)\n    input_layers (string or dict) -- the model's input layer(s)\n    output_layers (string or dict) -- the model's output layers()"
            },
            {
              "name": "clone",
              "lineno": 88,
              "docstring": null
            },
            {
              "name": "get_config",
              "lineno": 91,
              "docstring": "Return a dict representation of the object."
            },
            {
              "name": "get_num_classes",
              "lineno": 105,
              "docstring": "Get the number of classes that the model supports."
            },
            {
              "name": "get_class_name",
              "lineno": 111,
              "docstring": "Return the class name or description for the given class ID."
            },
            {
              "name": "process",
              "lineno": 117,
              "docstring": "Process an image with the model and return the results.\nTODO refactor event creation"
            },
            {
              "name": "visualize",
              "lineno": 148,
              "docstring": "Visualize the results on an image."
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L142",
        "TODO/FIXME/HACK left in code at L120"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/server.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "random"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": null,
          "names": [
            "ssl"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "http"
          ]
        },
        {
          "module": null,
          "names": [
            "flask"
          ]
        },
        {
          "module": null,
          "names": [
            "urllib3"
          ]
        },
        {
          "module": null,
          "names": [
            "requests"
          ]
        },
        {
          "module": null,
          "names": [
            "psutil"
          ]
        },
        {
          "module": null,
          "names": [
            "inspect"
          ]
        },
        {
          "module": null,
          "names": [
            "importlib"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "multiprocessing"
          ]
        },
        {
          "module": null,
          "names": [
            "setproctitle"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "Log"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "config",
          "names": [
            "config",
            "load_config",
            "print_config"
          ]
        },
        {
          "module": "server",
          "names": [
            "Event"
          ]
        },
        {
          "module": "server",
          "names": [
            "Action"
          ]
        },
        {
          "module": "server",
          "names": [
            "Model"
          ]
        },
        {
          "module": "server",
          "names": [
            "Stream"
          ]
        },
        {
          "module": "server",
          "names": [
            "Action"
          ]
        },
        {
          "module": "server",
          "names": [
            "Model"
          ]
        },
        {
          "module": "server",
          "names": [
            "Stream"
          ]
        }
      ],
      "functions": [
        {
          "name": "is_process_running",
          "lineno": 595,
          "docstring": "Check if there is any running process that contains the given name processName.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "find_process_pid",
          "lineno": 609,
          "docstring": "Find a process PID by it's name",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "Server",
          "lineno": 55,
          "docstring": "Backend media streaming server for handling resources like cameras, DNN models, datasets, ect.\nIt captures video from a variety of input sources (e.g. V4L2 cameras, MIPI CSI, RTP/RTSP),\nperforms inferencing, and then encodes the stream and transmits it with WebRTC to the clients.\n\nSee the Streams object and Streams.add() for how to open video devices.\nSet the Models object and Models.add() for how to load/create DNN models.\n\nIt can be run in a handful of different ways:\n    * process() runs one iteration of the processing loop from the calling process/thread\n    * run() runs the processing loop forever in the calling process/thread \n    * start() starts a new process that it runs forever in\n    * connect() attempts to connect to an existing process, and if not starts one\n    * running 'python3 server.py' to launch it manually (see __main__ below)\n    \nIt typically runs in it's own process and uses JSON REST API's for command & control.\nThis class is typically a singleton and can be accessed with Server.instance ",
          "methods": [
            {
              "name": "__init__",
              "lineno": 77,
              "docstring": "Create a new instance of the backend server.\n\nParameters:\n    name (string) -- name of the backend server process (also used for logging)\n    host (string) -- hostname/IP of the backend server to bind/connect to\n    rest_port (int) -- port used for JSON REST API server\n    webrtc_port (int) -- port used for WebRTC server\n    ssl_cert (string) -- path to PEM-encoded SSL/TLS certificate file for enabling HTTPS\n    ssl_key (string) -- path to PEM-encoded SSL/TLS key file for enabling HTTPS\n    stun_server (string) -- override the default WebRTC STUN server (stun.l.google.com:19302)\n    resources (string or dict) -- either a path a json config file or dict containing resources to load"
            },
            {
              "name": "init",
              "lineno": 115,
              "docstring": "This gets called once at the beginning of run() from within the process."
            },
            {
              "name": "connect",
              "lineno": 173,
              "docstring": "Attempt to connect to an existing instance of the server process.\nIf one is not running, start it when autostart=True"
            },
            {
              "name": "start",
              "lineno": 205,
              "docstring": "Launch the server running in a new process.\nReturns the RPC proxy object for clients to call."
            },
            {
              "name": "stop",
              "lineno": 222,
              "docstring": "Signal the process to stop running."
            },
            {
              "name": "run",
              "lineno": 233,
              "docstring": "Run forever - this automatically gets called by the process when it starts.\nIf you call this from your own process, it will block and not return until the server exits."
            },
            {
              "name": "is_running",
              "lineno": 245,
              "docstring": "Returns true if the process is initialized and running."
            },
            {
              "name": "process",
              "lineno": 251,
              "docstring": "Perform one interation of the processing loop."
            },
            {
              "name": "request",
              "lineno": 262,
              "docstring": "Wrapper around requests.request() that appends the server's address to the request URL.\nThis can be used to make JSON REST API requests to the server without needing it's URL."
            },
            {
              "name": "add_resource",
              "lineno": 284,
              "docstring": "Add a resource to the server.\nThis function should only be called from the process the server is running in.\n\nParameters:\n    group (string) -- should be one of:  'streams', 'models', 'datasets'\n    name (string)  -- the name of the resource\n    args (list)    -- arguments to create the resource with"
            },
            {
              "name": "get_resource",
              "lineno": 317,
              "docstring": "Return a config dict of a resource from a particular group.\nThis function should only be called from the process the server is running in.\n\nParameters:\n    group (string) -- should be one of:  'streams', 'models', 'datasets'\n    name (string)  -- the name of the resource"
            },
            {
              "name": "list_resources",
              "lineno": 331,
              "docstring": "Return a config dict from a group or groups of the server's resources.\nBy default, resources from all of the groups will be returned (models, streams, and datasets).\nIf the requested group is a string, only resources from that group will be returned.\nIf the requested group is a list, resources from each of those groups will be returned.\nThis function should only be called from the process the server is running in."
            },
            {
              "name": "load_resources",
              "lineno": 351,
              "docstring": "Load resources (streams/models/datasets) from a json config file or dict\nThis function should only be called from the process the server is running in.\n\nParameters:\n    resources (string or dict) -- a path to a json config file, or a dict\n                                  containing a representation of the resource"
            },
            {
              "name": "load_actions",
              "lineno": 384,
              "docstring": "Load action modules from server/actions/ directory."
            },
            {
              "name": "alert",
              "lineno": 451,
              "docstring": "Add alert text which gets displayed on the front-end page"
            },
            {
              "name": "_get_status",
              "lineno": 460,
              "docstring": "/status REST GET request handler"
            },
            {
              "name": "_get_resources",
              "lineno": 466,
              "docstring": "/resources REST GET request handler"
            },
            {
              "name": "_get_models",
              "lineno": 472,
              "docstring": "/models REST GET request handler"
            },
            {
              "name": "_get_model",
              "lineno": 478,
              "docstring": "/model/<name> REST GET request handler"
            },
            {
              "name": "_add_model",
              "lineno": 484,
              "docstring": "/models REST POST request handler"
            },
            {
              "name": "_get_streams",
              "lineno": 504,
              "docstring": "/streams REST GET request handler"
            },
            {
              "name": "_get_stream",
              "lineno": 510,
              "docstring": "/stream/<name> REST GET request handler"
            },
            {
              "name": "_add_stream",
              "lineno": 516,
              "docstring": "/streams REST POST request handler"
            },
            {
              "name": "_get_events",
              "lineno": 536,
              "docstring": "/events REST GET request handler"
            },
            {
              "name": "_add_action",
              "lineno": 542,
              "docstring": "/action REST POST request handler"
            },
            {
              "name": "_get_actions",
              "lineno": 565,
              "docstring": "/actions REST GET request handler"
            },
            {
              "name": "_get_action_types",
              "lineno": 571,
              "docstring": "/actions/types REST GET request handler"
            },
            {
              "name": "_get_action",
              "lineno": 577,
              "docstring": "/actions/<int:id> REST GET request handler"
            },
            {
              "name": "_set_action",
              "lineno": 583,
              "docstring": "/actions/<int:id> REST GET request handler"
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L194",
        "print() found (prefer logging) at L601",
        "print() found (prefer logging) at L615",
        "TODO/FIXME/HACK left in code at L211"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/stream.py",
      "imports": [
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Stream",
          "lineno": 28,
          "docstring": "Represents a pipeline from a video source -> processing -> video output",
          "methods": [
            {
              "name": "__init__",
              "lineno": 32,
              "docstring": null
            },
            {
              "name": "process",
              "lineno": 68,
              "docstring": "Perform one capture/process/output iteration"
            },
            {
              "name": "get_config",
              "lineno": 94,
              "docstring": "TODO add stats or runtime_stats option for easy frontend state-change comparison?\nthe videoOptions could be dynamic as well... (i.e. framerate - actually that is not?)"
            }
          ]
        }
      ],
      "issues": [
        "Bare except at L83",
        "print() found (prefer logging) at L114",
        "TODO/FIXME/HACK left in code at L84",
        "TODO/FIXME/HACK left in code at L96"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/filter.py",
      "imports": [],
      "functions": [],
      "classes": [
        {
          "name": "EventFilter",
          "lineno": 24,
          "docstring": "Class for filtering events.  Inherit your actions from this class to automatically\nadd filtering properties and call `self.filter(event)` in your `on_event()` callback.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 29,
              "docstring": "Initialize a new filter."
            },
            {
              "name": "filter",
              "lineno": 38,
              "docstring": "Return true if an event passes the filter, otherwise false."
            },
            {
              "name": "labels",
              "lineno": 54,
              "docstring": null
            },
            {
              "name": "labels",
              "lineno": 58,
              "docstring": null
            },
            {
              "name": "min_frames",
              "lineno": 66,
              "docstring": null
            },
            {
              "name": "min_frames",
              "lineno": 70,
              "docstring": null
            },
            {
              "name": "min_score",
              "lineno": 74,
              "docstring": null
            },
            {
              "name": "min_score",
              "lineno": 78,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/event.py",
      "imports": [
        {
          "module": "time",
          "names": [
            "time"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Event",
          "lineno": 29,
          "docstring": "Represents a classification/detection event.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 33,
              "docstring": "Create a new event"
            },
            {
              "name": "update",
              "lineno": 53,
              "docstring": "Update an event with new results"
            },
            {
              "name": "dispatch",
              "lineno": 64,
              "docstring": "Send this event to actions for processing"
            },
            {
              "name": "to_dict",
              "lineno": 76,
              "docstring": "Return a dict representation of the event"
            },
            {
              "name": "to_list",
              "lineno": 94,
              "docstring": "Return a list representation of the event"
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/action.py",
      "imports": [
        {
          "module": null,
          "names": [
            "copy"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Action",
          "lineno": 26,
          "docstring": "Base class for actions that filter events and trigger notifications/responses/ect.\nUsers should inherit from this class and implement their own logic in on_event()\nAny @property attributes are automatically configurable from the webpage UI.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 32,
              "docstring": null
            },
            {
              "name": "on_event",
              "lineno": 40,
              "docstring": null
            },
            {
              "name": "to_dict",
              "lineno": 43,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/__init__.py",
      "imports": [
        {
          "module": "server",
          "names": [
            "Server"
          ]
        },
        {
          "module": "stream",
          "names": [
            "Stream"
          ]
        },
        {
          "module": "action",
          "names": [
            "Action"
          ]
        },
        {
          "module": "filter",
          "names": [
            "EventFilter"
          ]
        },
        {
          "module": "event",
          "names": [
            "Event"
          ]
        },
        {
          "module": "model",
          "names": [
            "Model"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/event_timeline.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "plotly.graph_objects"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "Input",
            "Output"
          ]
        },
        {
          "module": "dash_bootstrap_templates",
          "names": [
            "load_figure_template"
          ]
        },
        {
          "module": "card",
          "names": [
            "create_card",
            "card_callback"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_event_timeline",
          "lineno": 38,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "refresh_timeline",
          "lineno": 55,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "open_timeline",
          "lineno": 91,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/event_table.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "dash_table",
            "Input",
            "Output"
          ]
        },
        {
          "module": "card",
          "names": [
            "create_card",
            "card_callback"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_event_table",
          "lineno": 32,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "refresh_events",
          "lineno": 89,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "open_events",
          "lineno": 112,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/video_player.py",
      "imports": [
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "Input",
            "Output",
            "ALL",
            "MATCH"
          ]
        },
        {
          "module": "dash.exceptions",
          "names": [
            "PreventUpdate"
          ]
        },
        {
          "module": "card",
          "names": [
            "create_card",
            "card_callback"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_video_player",
          "lineno": 13,
          "docstring": "Create a video player card from a stream\nTODO:  scale the card dimensions based on stream aspect ratio (default is 1280x720)\n       grid row height is 30px (different than column width)",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "play_stream",
          "lineno": 53,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L56",
        "TODO/FIXME/HACK left in code at L16"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/test_card.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": "dash",
          "names": [
            "Input",
            "ALL"
          ]
        },
        {
          "module": "card",
          "names": [
            "create_card",
            "card_callback"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_test_card",
          "lineno": 8,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "on_test_card",
          "lineno": 16,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "on_test_card_menu",
          "lineno": 27,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L9",
        "print() found (prefer logging) at L17",
        "print() found (prefer logging) at L18",
        "print() found (prefer logging) at L28",
        "print() found (prefer logging) at L29",
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L31"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/navbar.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_bootstrap_components"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "callback",
            "Input",
            "Output"
          ]
        },
        {
          "module": "config",
          "names": [
            "config"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_navbar",
          "lineno": 31,
          "docstring": "Create a navbar component",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_navbar_menus",
          "lineno": 45,
          "docstring": "Create the menu components of a navbar",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "refresh_nav",
          "lineno": 120,
          "docstring": "Refresh the navbar structure on server updates",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L124"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/model_options.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_bootstrap_components"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "callback",
            "Input",
            "Output",
            "State",
            "ALL"
          ]
        },
        {
          "module": "dash.exceptions",
          "names": [
            "PreventUpdate"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_model_dialog",
          "lineno": 33,
          "docstring": "Create the top-level dialog container used for creating/configuring models.\nIt's children will be created dynamically in create_model_options() below.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_model_options",
          "lineno": 41,
          "docstring": "Create the dialog body used for creating/configuring models.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_pretrained_options",
          "lineno": 62,
          "docstring": "Create the form for the pre-trained models tab",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "list_pretrained_models",
          "lineno": 98,
          "docstring": "Return a drop-down list of pre-trained model options that can be selected",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_import_options",
          "lineno": 119,
          "docstring": "Create the form for the import model tab",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_import_sub_options",
          "lineno": 165,
          "docstring": "Create form elements that are specific to the type of model being imported",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "validate_model_import_path",
          "lineno": 204,
          "docstring": "Validate that the model path exists",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "validate_model_import_labels",
          "lineno": 219,
          "docstring": "Validate that the model labels path exists",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "model_name_from_path",
          "lineno": 231,
          "docstring": "Return the directory of a model with it's filename\n'/path/my_model/net.onnx' will return 'my_model/net.onnx'",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "model_submit_pretrained",
          "lineno": 245,
          "docstring": "Callback for when the pretrained model form is submitted",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "model_submit_import_classification",
          "lineno": 266,
          "docstring": "Callback for when the import classification model form is submitted",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "model_submit_import_detection",
          "lineno": 298,
          "docstring": "Callback for when the import detection model form is submitted",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "switch_model_tab",
          "lineno": 324,
          "docstring": "Switch the content of the current tab",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "show_model_dialog",
          "lineno": 346,
          "docstring": "Callback for triggering to show/hide the model options dialog",
          "typed": false,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L252",
        "print() found (prefer logging) at L273",
        "print() found (prefer logging) at L305",
        "print() found (prefer logging) at L352",
        "print() found (prefer logging) at L353",
        "TODO/FIXME/HACK left in code at L331"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/actions.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_bootstrap_components"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "Input",
            "Output",
            "State",
            "MATCH"
          ]
        },
        {
          "module": "dash.exceptions",
          "names": [
            "PreventUpdate"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_actions_dialog",
          "lineno": 32,
          "docstring": "Create the top-level dialog container used for configuring actions.\nIt's children will be created dynamically when the dialog is opened.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_actions_body",
          "lineno": 46,
          "docstring": "Create the dialog body used for creating/configuring actions.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_action_settings",
          "lineno": 71,
          "docstring": "Create components for configuring each action",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "show_actions_dialog",
          "lineno": 166,
          "docstring": "Callback for triggering to show/hide the actions dialog",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "on_create_action",
          "lineno": 184,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "on_action_enabled",
          "lineno": 196,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "on_action_expand",
          "lineno": 210,
          "docstring": "Callback for expanding/collapsing action properties",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "rolldown_class_name",
          "lineno": 222,
          "docstring": "Return the FontAwesome icon name for the rolldown",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "on_action_property_bool",
          "lineno": 233,
          "docstring": "Callback for updating boolean properties",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "on_action_property_int",
          "lineno": 251,
          "docstring": "Callback for updating int properties",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "on_action_property_float",
          "lineno": 269,
          "docstring": "Callback for updating float properties",
          "typed": false,
          "has_logging": false,
          "raises": 2
        },
        {
          "name": "on_action_property_str",
          "lineno": 287,
          "docstring": "Callback for updating string properties",
          "typed": false,
          "has_logging": false,
          "raises": 2
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L78",
        "print() found (prefer logging) at L79",
        "print() found (prefer logging) at L138",
        "print() found (prefer logging) at L240",
        "print() found (prefer logging) at L258",
        "print() found (prefer logging) at L276",
        "print() found (prefer logging) at L294"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/grid.py",
      "imports": [
        {
          "module": null,
          "names": [
            "copy"
          ]
        },
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_draggable"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "Input",
            "Output",
            "State",
            "ALL"
          ]
        },
        {
          "module": "dash.exceptions",
          "names": [
            "PreventUpdate"
          ]
        },
        {
          "module": "card",
          "names": [
            "card_callbacks",
            "CARD_CONTAINER_PREFIX"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_grid",
          "lineno": 32,
          "docstring": "Create a grid for draggable/resizable components",
          "typed": false,
          "has_logging": false,
          "raises": 5
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L118",
        "print() found (prefer logging) at L151",
        "print() found (prefer logging) at L236"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/card.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_bootstrap_components"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "callback",
            "Input",
            "Output",
            "State",
            "MATCH"
          ]
        },
        {
          "module": "config",
          "names": [
            "config"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_card",
          "lineno": 34,
          "docstring": "Creates a card container around a set of child components.\nThe card can be dragged, resized, collapse, and closed.\n\nParameters:\n    children -- component or list of components to be used as the body of the card\n    title (str) -- the name used for the card's title bar\n    id (str or int) -- the index or name to be used for the card\n    width (int) -- the default width (in grid cells) of the card (the default is 6 cells)\n    height (int) -- the default height (in grid cells) of the card (the default is 8 cells)\n    close_button (bool) -- if true, there will be a close button in the header (default is true)\n    minimize_button (bool) -- if true, there will be a collapse/expand button in the header\n    settings_button (bool) -- if true, there will be a settings button added to the header\n                              this can also be a string which sets a unique ID type for the button\n    \nIf ID is unspecified, it will be the Nth card created.\nIf title is unspecified, it will be set to the ID.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "collapse_card",
          "lineno": 113,
          "docstring": "Dash callback used to trigger a card being expanded/collapsed\nIt does this by modifying the visibility in the style of the card body",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "card_callback",
          "lineno": 129,
          "docstring": "Decorator used to register card callbacks with the grid.\nThese are used to create new cards based on one or more Input triggers.\nThese functions should return a card made with the create_card() function.\n\nFor example, when 'my_button' gets pressed below, it will create a new card to be added to the grid:\n\n    @card_callback(Input('my_button', 'n_clicks'))\n    create_my_card(n_clicks):\n        return create_card([f\"My card body {n_clicks}\"], title=f\"My card {n_clicks}\", id=f\"my_card_{n_clicks}\")\n \nThe reason these are used is because the grid needs to manage it's own children, but dash Outputs can \nonly have one callback. So this card_callback decorator registers your sub-callback with the grid's callback.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/help.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": "dash",
          "names": [
            "html",
            "Input",
            "ALL"
          ]
        },
        {
          "module": "card",
          "names": [
            "create_card",
            "card_callback"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_help",
          "lineno": 8,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/__init__.py",
      "imports": [
        {
          "module": "card",
          "names": [
            "create_card",
            "card_callback"
          ]
        },
        {
          "module": "grid",
          "names": [
            "create_grid"
          ]
        },
        {
          "module": "navbar",
          "names": [
            "create_navbar"
          ]
        },
        {
          "module": "alerts",
          "names": [
            "create_alerts"
          ]
        },
        {
          "module": "actions",
          "names": [
            "create_actions_dialog"
          ]
        },
        {
          "module": "event_table",
          "names": [
            "create_event_table"
          ]
        },
        {
          "module": "event_timeline",
          "names": [
            "create_event_timeline"
          ]
        },
        {
          "module": "video_player",
          "names": [
            "create_video_player"
          ]
        },
        {
          "module": "stream_options",
          "names": [
            "create_stream_dialog",
            "create_stream_options"
          ]
        },
        {
          "module": "model_options",
          "names": [
            "create_model_dialog",
            "create_model_options"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/stream_options.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_bootstrap_components"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "callback",
            "Input",
            "Output",
            "State",
            "ALL"
          ]
        },
        {
          "module": "dash.exceptions",
          "names": [
            "PreventUpdate"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_stream_dialog",
          "lineno": 11,
          "docstring": "Create the top-level dialog container used for creating/configuring streams.\nIt's children will be created dynamically in create_stream_options() below.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_stream_options",
          "lineno": 19,
          "docstring": "Create the dialog body used for creating/configuring streams.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "list_models",
          "lineno": 61,
          "docstring": "Return a drop-down list of models from the server that can be selected.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "show_stream_dialog",
          "lineno": 77,
          "docstring": "Callback for triggering to show/hide the stream options dialog",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "stream_submit",
          "lineno": 105,
          "docstring": "Callback for when the stream form is submitted",
          "typed": false,
          "has_logging": false,
          "raises": 2
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L83",
        "print() found (prefer logging) at L84",
        "print() found (prefer logging) at L112",
        "Hardcoded video device path at L34",
        "Hardcoded video device path at L34"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/alerts.py",
      "imports": [
        {
          "module": null,
          "names": [
            "dash"
          ]
        },
        {
          "module": null,
          "names": [
            "dash_bootstrap_components"
          ]
        },
        {
          "module": "dash",
          "names": [
            "dcc",
            "html",
            "Input",
            "Output",
            "State"
          ]
        },
        {
          "module": "dash.exceptions",
          "names": [
            "PreventUpdate"
          ]
        },
        {
          "module": "server",
          "names": [
            "Server"
          ]
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_alerts",
          "lineno": 33,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "refresh_alerts",
          "lineno": 54,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "level_to_color",
          "lineno": 72,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/html/stream.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "threading"
          ]
        },
        {
          "module": null,
          "names": [
            "traceback"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "imageNet",
            "detectNet",
            "segNet",
            "actionNet",
            "poseNet",
            "backgroundNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaFont",
            "cudaAllocMapped"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Stream",
          "lineno": 31,
          "docstring": "Thread for streaming video and applying DNN inference",
          "methods": [
            {
              "name": "__init__",
              "lineno": 35,
              "docstring": null
            },
            {
              "name": "process",
              "lineno": 58,
              "docstring": "Capture one image from the stream, process it, and output it."
            },
            {
              "name": "run",
              "lineno": 113,
              "docstring": "Run the stream processing thread's main loop."
            },
            {
              "name": "usage",
              "lineno": 124,
              "docstring": "Return help text for when the app is started with -h or --help"
            }
          ]
        }
      ],
      "issues": [
        "Bare except at L120",
        "print() found (prefer logging) at L72",
        "print() found (prefer logging) at L79",
        "print() found (prefer logging) at L82",
        "print() found (prefer logging) at L96",
        "print() found (prefer logging) at L99",
        "print() found (prefer logging) at L100",
        "print() found (prefer logging) at L101",
        "print() found (prefer logging) at L109"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/www/html/app.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "ssl"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "http.server",
          "names": [
            "HTTPServer",
            "SimpleHTTPRequestHandler"
          ]
        },
        {
          "module": "stream",
          "names": [
            "Stream"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L63"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/eval_ssd.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "vision.ssd.vgg_ssd",
          "names": [
            "create_vgg_ssd",
            "create_vgg_ssd_predictor"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd",
          "names": [
            "create_mobilenetv1_ssd",
            "create_mobilenetv1_ssd_predictor"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd_lite",
          "names": [
            "create_mobilenetv1_ssd_lite",
            "create_mobilenetv1_ssd_lite_predictor"
          ]
        },
        {
          "module": "vision.ssd.squeezenet_ssd_lite",
          "names": [
            "create_squeezenet_ssd_lite",
            "create_squeezenet_ssd_lite_predictor"
          ]
        },
        {
          "module": "vision.datasets.voc_dataset",
          "names": [
            "VOCDataset"
          ]
        },
        {
          "module": "vision.datasets.open_images",
          "names": [
            "OpenImagesDataset"
          ]
        },
        {
          "module": "vision.utils",
          "names": [
            "box_utils",
            "measurements"
          ]
        },
        {
          "module": "vision.utils.misc",
          "names": [
            "str2bool",
            "Timer"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "pathlib"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "vision.ssd.mobilenet_v2_ssd_lite",
          "names": [
            "create_mobilenetv2_ssd_lite",
            "create_mobilenetv2_ssd_lite_predictor"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "MeanAPEvaluator",
          "lineno": 18,
          "docstring": "Mean Average Precision (mAP) evaluator",
          "methods": [
            {
              "name": "__init__",
              "lineno": 22,
              "docstring": null
            },
            {
              "name": "compute",
              "lineno": 48,
              "docstring": null
            },
            {
              "name": "log_results",
              "lineno": 99,
              "docstring": null
            },
            {
              "name": "group_annotation_by_class",
              "lineno": 107,
              "docstring": null
            },
            {
              "name": "compute_average_precision_per_class",
              "lineno": 141,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L77"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/open_images_downloader.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "boto3"
          ]
        },
        {
          "module": null,
          "names": [
            "botocore"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "functools"
          ]
        },
        {
          "module": null,
          "names": [
            "packaging"
          ]
        },
        {
          "module": null,
          "names": [
            "pandas"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "urllib",
          "names": [
            "request"
          ]
        },
        {
          "module": "random",
          "names": [
            "sample"
          ]
        },
        {
          "module": "botocore",
          "names": [
            "UNSIGNED"
          ]
        },
        {
          "module": "botocore.config",
          "names": [
            "Config"
          ]
        },
        {
          "module": "multiprocessing",
          "names": [
            "Pool",
            "Manager"
          ]
        }
      ],
      "functions": [
        {
          "name": "parse_args",
          "lineno": 27,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "download",
          "lineno": 43,
          "docstring": null,
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "batch_download",
          "lineno": 68,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "http_download",
          "lineno": 77,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "log_counts",
          "lineno": 86,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_totals",
          "lineno": 91,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L88",
        "print() found (prefer logging) at L215",
        "print() found (prefer logging) at L216",
        "print() found (prefer logging) at L217",
        "print() found (prefer logging) at L218",
        "print() found (prefer logging) at L220",
        "print() found (prefer logging) at L222",
        "print() found (prefer logging) at L224",
        "print() found (prefer logging) at L225",
        "print() found (prefer logging) at L226"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/onnx_export.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.onnx"
          ]
        },
        {
          "module": "vision.ssd.vgg_ssd",
          "names": [
            "create_vgg_ssd"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd",
          "names": [
            "create_mobilenetv1_ssd"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd_lite",
          "names": [
            "create_mobilenetv1_ssd_lite"
          ]
        },
        {
          "module": "vision.ssd.squeezenet_ssd_lite",
          "names": [
            "create_squeezenet_ssd_lite"
          ]
        },
        {
          "module": "vision.ssd.mobilenet_v2_ssd_lite",
          "names": [
            "create_mobilenetv2_ssd_lite"
          ]
        },
        {
          "module": "vision.ssd.config",
          "names": [
            "mobilenetv1_ssd_config"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L29",
        "print() found (prefer logging) at L33",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L71",
        "print() found (prefer logging) at L72",
        "print() found (prefer logging) at L73",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L91",
        "print() found (prefer logging) at L111",
        "print() found (prefer logging) at L113"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/train_ssd.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "itertools"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch.utils.data",
          "names": [
            "DataLoader",
            "ConcatDataset"
          ]
        },
        {
          "module": "torch.utils.tensorboard",
          "names": [
            "SummaryWriter"
          ]
        },
        {
          "module": "torch.optim.lr_scheduler",
          "names": [
            "CosineAnnealingLR",
            "MultiStepLR"
          ]
        },
        {
          "module": "vision.utils.misc",
          "names": [
            "Timer",
            "freeze_net_layers",
            "store_labels"
          ]
        },
        {
          "module": "vision.ssd.ssd",
          "names": [
            "MatchPrior"
          ]
        },
        {
          "module": "vision.ssd.vgg_ssd",
          "names": [
            "create_vgg_ssd"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd",
          "names": [
            "create_mobilenetv1_ssd"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd_lite",
          "names": [
            "create_mobilenetv1_ssd_lite"
          ]
        },
        {
          "module": "vision.ssd.mobilenet_v2_ssd_lite",
          "names": [
            "create_mobilenetv2_ssd_lite"
          ]
        },
        {
          "module": "vision.ssd.squeezenet_ssd_lite",
          "names": [
            "create_squeezenet_ssd_lite"
          ]
        },
        {
          "module": "vision.datasets.voc_dataset",
          "names": [
            "VOCDataset"
          ]
        },
        {
          "module": "vision.datasets.open_images",
          "names": [
            "OpenImagesDataset"
          ]
        },
        {
          "module": "vision.nn.multibox_loss",
          "names": [
            "MultiboxLoss"
          ]
        },
        {
          "module": "vision.ssd.config",
          "names": [
            "vgg_ssd_config"
          ]
        },
        {
          "module": "vision.ssd.config",
          "names": [
            "mobilenetv1_ssd_config"
          ]
        },
        {
          "module": "vision.ssd.config",
          "names": [
            "squeezenet_ssd_config"
          ]
        },
        {
          "module": "vision.ssd.data_preprocessing",
          "names": [
            "TrainAugmentation",
            "TestTransform"
          ]
        },
        {
          "module": "eval_ssd",
          "names": [
            "MeanAPEvaluator"
          ]
        }
      ],
      "functions": [
        {
          "name": "train",
          "lineno": 126,
          "docstring": null,
          "typed": false,
          "has_logging": true,
          "raises": 0
        },
        {
          "name": "test",
          "lineno": 191,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/run_ssd_example.py",
      "imports": [
        {
          "module": "vision.ssd.vgg_ssd",
          "names": [
            "create_vgg_ssd",
            "create_vgg_ssd_predictor"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd",
          "names": [
            "create_mobilenetv1_ssd",
            "create_mobilenetv1_ssd_predictor"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd_lite",
          "names": [
            "create_mobilenetv1_ssd_lite",
            "create_mobilenetv1_ssd_lite_predictor"
          ]
        },
        {
          "module": "vision.ssd.squeezenet_ssd_lite",
          "names": [
            "create_squeezenet_ssd_lite",
            "create_squeezenet_ssd_lite_predictor"
          ]
        },
        {
          "module": "vision.ssd.mobilenet_v2_ssd_lite",
          "names": [
            "create_mobilenetv2_ssd_lite",
            "create_mobilenetv2_ssd_lite_predictor"
          ]
        },
        {
          "module": "vision.utils.misc",
          "names": [
            "Timer"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L12",
        "print() found (prefer logging) at L32",
        "print() found (prefer logging) at L66"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/misc.py",
      "imports": [
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [
        {
          "name": "str2bool",
          "lineno": 5,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_checkpoint",
          "lineno": 24,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_checkpoint",
          "lineno": 34,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "freeze_net_layers",
          "lineno": 38,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "store_labels",
          "lineno": 43,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "Timer",
          "lineno": 9,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 10,
              "docstring": null
            },
            {
              "name": "start",
              "lineno": 13,
              "docstring": null
            },
            {
              "name": "end",
              "lineno": 16,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/box_utils.py",
      "imports": [
        {
          "module": null,
          "names": [
            "collections"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "itertools"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        }
      ],
      "functions": [
        {
          "name": "generate_ssd_priors",
          "lineno": 12,
          "docstring": "Generate SSD Prior Boxes.\n\nIt returns the center, height and width of the priors. The values are relative to the image size\nArgs:\n    specs: SSDSpecs about the shapes of sizes of prior boxes. i.e.\n        specs = [\n            SSDSpec(38, 8, SSDBoxSizes(30, 60), [2]),\n            SSDSpec(19, 16, SSDBoxSizes(60, 111), [2, 3]),\n            SSDSpec(10, 32, SSDBoxSizes(111, 162), [2, 3]),\n            SSDSpec(5, 64, SSDBoxSizes(162, 213), [2, 3]),\n            SSDSpec(3, 100, SSDBoxSizes(213, 264), [2]),\n            SSDSpec(1, 300, SSDBoxSizes(264, 315), [2])\n        ]\n    image_size: image size.\n    clamp: if true, clamp the values to make fall between [0.0, 1.0]\nReturns:\n    priors (num_priors, 4): The prior boxes represented as [[center_x, center_y, w, h]]. All the values\n        are relative to the image size.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "convert_locations_to_boxes",
          "lineno": 83,
          "docstring": "Convert regressional location results of SSD into boxes in the form of (center_x, center_y, h, w).\n\nThe conversion:\n    $$predicted\\_center * center_variance = \frac {real\\_center - prior\\_center} {prior\\_hw}$$\n    $$exp(predicted\\_hw * size_variance) = \frac {real\\_hw} {prior\\_hw}$$\nWe do it in the inverse direction here.\nArgs:\n    locations (batch_size, num_priors, 4): the regression output of SSD. It will contain the outputs as well.\n    priors (num_priors, 4) or (batch_size/1, num_priors, 4): prior boxes.\n    center_variance: a float used to change the scale of center.\n    size_variance: a float used to change of scale of size.\nReturns:\n    boxes:  priors: [[center_x, center_y, h, w]]. All the values\n        are relative to the image size.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "convert_boxes_to_locations",
          "lineno": 109,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "area_of",
          "lineno": 119,
          "docstring": "Compute the areas of rectangles given two corners.\n\nArgs:\n    left_top (N, 2): left top corner.\n    right_bottom (N, 2): right bottom corner.\n\nReturns:\n    area (N): return the area.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "iou_of",
          "lineno": 133,
          "docstring": "Return intersection-over-union (Jaccard index) of boxes.\n\nArgs:\n    boxes0 (N, 4): ground truth boxes.\n    boxes1 (N or 1, 4): predicted boxes.\n    eps: a small number to avoid 0 as denominator.\nReturns:\n    iou (N): IoU values.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "assign_priors",
          "lineno": 152,
          "docstring": "Assign ground truth boxes and targets to priors.\n\nArgs:\n    gt_boxes (num_targets, 4): ground truth boxes.\n    gt_labels (num_targets): labels of targets.\n    priors (num_priors, 4): corner form priors\nReturns:\n    boxes (num_priors, 4): real values for priors.\n    labels (num_priros): labels for priors.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "hard_negative_mining",
          "lineno": 182,
          "docstring": "It used to suppress the presence of a large number of negative prediction.\nIt works on image level not batch level.\nFor any example/image, it keeps all the positive predictions and\n cut the number of negative predictions to make sure the ratio\n between the negative examples and positive examples is no more\n the given ratio for an image.\n\nArgs:\n    loss (N, num_priors): the loss for each example.\n    labels (N, num_priors): the labels.\n    neg_pos_ratio:  the ratio between the negative examples and positive examples.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "center_form_to_corner_form",
          "lineno": 207,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "corner_form_to_center_form",
          "lineno": 212,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "hard_nms",
          "lineno": 219,
          "docstring": "Args:\n    box_scores (N, 5): boxes in corner-form and probabilities.\n    iou_threshold: intersection over union threshold.\n    top_k: keep top_k results. If k <= 0, keep all the results.\n    candidate_size: only consider the candidates with the highest scores.\nReturns:\n     picked: a list of indexes of the kept boxes",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "nms",
          "lineno": 252,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "soft_nms",
          "lineno": 260,
          "docstring": "Soft NMS implementation.\n\nReferences:\n    https://arxiv.org/abs/1704.04503\n    https://github.com/facebookresearch/Detectron/blob/master/detectron/utils/cython_nms.pyx\n\nArgs:\n    box_scores (N, 5): boxes in corner-form and probabilities.\n    score_threshold: boxes with scores less than value are not considered.\n    sigma: the parameter in score re-computation.\n        scores[i] = scores[i] * exp(-(iou_i)^2 / simga)\n    top_k: keep top_k results. If k <= 0, keep all the results.\nReturns:\n     picked_box_scores (K, 5): results of NMS.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/box_utils_numpy.py",
      "imports": [
        {
          "module": "box_utils",
          "names": [
            "SSDSpec"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List"
          ]
        },
        {
          "module": null,
          "names": [
            "itertools"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [
        {
          "name": "generate_ssd_priors",
          "lineno": 9,
          "docstring": "Generate SSD Prior Boxes.\n\nIt returns the center, height and width of the priors. The values are relative to the image size\nArgs:\n    specs: SSDSpecs about the shapes of sizes of prior boxes. i.e.\n        specs = [\n            SSDSpec(38, 8, SSDBoxSizes(30, 60), [2]),\n            SSDSpec(19, 16, SSDBoxSizes(60, 111), [2, 3]),\n            SSDSpec(10, 32, SSDBoxSizes(111, 162), [2, 3]),\n            SSDSpec(5, 64, SSDBoxSizes(162, 213), [2, 3]),\n            SSDSpec(3, 100, SSDBoxSizes(213, 264), [2]),\n            SSDSpec(1, 300, SSDBoxSizes(264, 315), [2])\n        ]\n    image_size: image size.\n    clamp: if true, clamp the values to make fall between [0.0, 1.0]\nReturns:\n    priors (num_priors, 4): The prior boxes represented as [[center_x, center_y, w, h]]. All the values\n        are relative to the image size.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "convert_locations_to_boxes",
          "lineno": 80,
          "docstring": "Convert regressional location results of SSD into boxes in the form of (center_x, center_y, h, w).\n\nThe conversion:\n    $$predicted\\_center * center_variance = \frac {real\\_center - prior\\_center} {prior\\_hw}$$\n    $$exp(predicted\\_hw * size_variance) = \frac {real\\_hw} {prior\\_hw}$$\nWe do it in the inverse direction here.\nArgs:\n    locations (batch_size, num_priors, 4): the regression output of SSD. It will contain the outputs as well.\n    priors (num_priors, 4) or (batch_size/1, num_priors, 4): prior boxes.\n    center_variance: a float used to change the scale of center.\n    size_variance: a float used to change of scale of size.\nReturns:\n    boxes:  priors: [[center_x, center_y, h, w]]. All the values\n        are relative to the image size.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "convert_boxes_to_locations",
          "lineno": 106,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "area_of",
          "lineno": 116,
          "docstring": "Compute the areas of rectangles given two corners.\n\nArgs:\n    left_top (N, 2): left top corner.\n    right_bottom (N, 2): right bottom corner.\n\nReturns:\n    area (N): return the area.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "iou_of",
          "lineno": 130,
          "docstring": "Return intersection-over-union (Jaccard index) of boxes.\n\nArgs:\n    boxes0 (N, 4): ground truth boxes.\n    boxes1 (N or 1, 4): predicted boxes.\n    eps: a small number to avoid 0 as denominator.\nReturns:\n    iou (N): IoU values.",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "center_form_to_corner_form",
          "lineno": 149,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "corner_form_to_center_form",
          "lineno": 154,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "hard_nms",
          "lineno": 161,
          "docstring": "Args:\n    box_scores (N, 5): boxes in corner-form and probabilities.\n    iou_threshold: intersection over union threshold.\n    top_k: keep top_k results. If k <= 0, keep all the results.\n    candidate_size: only consider the candidates with the highest scores.\nReturns:\n     picked: a list of indexes of the kept boxes",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/model_book.py",
      "imports": [
        {
          "module": "collections",
          "names": [
            "OrderedDict"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ModelBook",
          "lineno": 5,
          "docstring": "Maintain the mapping between modules and their paths.\n\nExample:\n    book = ModelBook(model_ft)\n    for p, m in book.conv2d_modules():\n        print('path:', p, 'num of filters:', m.out_channels)\n        assert m is book.get_module(p)",
          "methods": [
            {
              "name": "__init__",
              "lineno": 15,
              "docstring": null
            },
            {
              "name": "_construct",
              "lineno": 22,
              "docstring": null
            },
            {
              "name": "conv2d_modules",
              "lineno": 31,
              "docstring": null
            },
            {
              "name": "linear_modules",
              "lineno": 34,
              "docstring": null
            },
            {
              "name": "modules",
              "lineno": 37,
              "docstring": null
            },
            {
              "name": "num_of_conv2d_modules",
              "lineno": 42,
              "docstring": null
            },
            {
              "name": "num_of_conv2d_filters",
              "lineno": 45,
              "docstring": "Return the sum of out_channels of all conv2d layers.\n\nHere we treat the sub weight with size of [in_channels, h, w] as a single filter."
            },
            {
              "name": "num_of_linear_modules",
              "lineno": 55,
              "docstring": null
            },
            {
              "name": "num_of_linear_filters",
              "lineno": 58,
              "docstring": null
            },
            {
              "name": "num_of_modules",
              "lineno": 64,
              "docstring": null
            },
            {
              "name": "get_module",
              "lineno": 71,
              "docstring": null
            },
            {
              "name": "get_path",
              "lineno": 74,
              "docstring": null
            },
            {
              "name": "update",
              "lineno": 77,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L11"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/measurements.py",
      "imports": [
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [
        {
          "name": "compute_average_precision",
          "lineno": 4,
          "docstring": "It computes average precision based on the definition of Pascal Competition. It computes the under curve area\nof precision and recall. Recall follows the normal definition. Precision is a variant.\npascal_precision[i] = typical_precision[i:].max()",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "compute_voc2007_average_precision",
          "lineno": 24,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/__init__.py",
      "imports": [
        {
          "module": "misc",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/transforms/transforms.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torchvision",
          "names": [
            "transforms"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "types"
          ]
        },
        {
          "module": "numpy",
          "names": [
            "random"
          ]
        }
      ],
      "functions": [
        {
          "name": "intersect",
          "lineno": 12,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "jaccard_numpy",
          "lineno": 19,
          "docstring": "Compute the jaccard overlap of two sets of boxes.  The jaccard overlap\nis simply the intersection over union of two boxes.\nE.g.:\n    A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\nArgs:\n    box_a: Multiple bounding boxes, Shape: [num_boxes,4]\n    box_b: Single bounding box, Shape: [4]\nReturn:\n    jaccard overlap: Shape: [box_a.shape[0], box_a.shape[1]]",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "Compose",
          "lineno": 39,
          "docstring": "Composes several augmentations together.\nArgs:\n    transforms (List[Transform]): list of transforms to compose.\nExample:\n    >>> augmentations.Compose([\n    >>>     transforms.CenterCrop(10),\n    >>>     transforms.ToTensor(),\n    >>> ])",
          "methods": [
            {
              "name": "__init__",
              "lineno": 50,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 53,
              "docstring": null
            }
          ]
        },
        {
          "name": "Lambda",
          "lineno": 59,
          "docstring": "Applies a lambda as a transform.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 62,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 66,
              "docstring": null
            }
          ]
        },
        {
          "name": "ConvertFromInts",
          "lineno": 70,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 71,
              "docstring": null
            }
          ]
        },
        {
          "name": "SubtractMeans",
          "lineno": 75,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 76,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 79,
              "docstring": null
            }
          ]
        },
        {
          "name": "ToAbsoluteCoords",
          "lineno": 85,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 86,
              "docstring": null
            }
          ]
        },
        {
          "name": "ToPercentCoords",
          "lineno": 96,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 97,
              "docstring": null
            }
          ]
        },
        {
          "name": "Resize",
          "lineno": 107,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 108,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 111,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomSaturation",
          "lineno": 117,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 118,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 124,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomHue",
          "lineno": 131,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 132,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 136,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomLightingNoise",
          "lineno": 144,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 145,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 150,
              "docstring": null
            }
          ]
        },
        {
          "name": "ConvertColor",
          "lineno": 158,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 159,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 163,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomContrast",
          "lineno": 179,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 180,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 187,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomBrightness",
          "lineno": 194,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 195,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 200,
              "docstring": null
            }
          ]
        },
        {
          "name": "ToCV2Image",
          "lineno": 207,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 208,
              "docstring": null
            }
          ]
        },
        {
          "name": "ToTensor",
          "lineno": 212,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 213,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomSampleCrop",
          "lineno": 217,
          "docstring": "Crop\nArguments:\n    img (Image): the image being input during training\n    boxes (Tensor): the original bounding boxes in pt form\n    labels (Tensor): the class labels for each bbox\n    mode (float tuple): the min and max jaccard overlaps\nReturn:\n    (img, boxes, classes)\n        img (Image): the cropped image\n        boxes (Tensor): the adjusted bounding boxes in pt form\n        labels (Tensor): the class labels for each bbox",
          "methods": [
            {
              "name": "__init__",
              "lineno": 230,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 243,
              "docstring": null
            }
          ]
        },
        {
          "name": "Expand",
          "lineno": 323,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 324,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 327,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomMirror",
          "lineno": 351,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 352,
              "docstring": null
            }
          ]
        },
        {
          "name": "SwapChannels",
          "lineno": 361,
          "docstring": "Transforms a tensorized image by swapping the channels in the order\n specified in the swap tuple.\nArgs:\n    swaps (int triple): final order of channels\n        eg: (2, 1, 0)",
          "methods": [
            {
              "name": "__init__",
              "lineno": 369,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 372,
              "docstring": "Args:\n    image (Tensor): image tensor to be transformed\nReturn:\n    a tensor with channels swapped according to swap"
            }
          ]
        },
        {
          "name": "PhotometricDistort",
          "lineno": 387,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 388,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 400,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/transforms/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/generate_vocdata.py",
      "imports": [
        {
          "module": null,
          "names": [
            "glob"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "xml.etree.ElementTree"
          ]
        },
        {
          "module": "random",
          "names": [
            "random"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 7,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_folder",
          "lineno": 117,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L13",
        "print() found (prefer logging) at L35",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L75",
        "print() found (prefer logging) at L119",
        "print() found (prefer logging) at L125"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/voc_dataset.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "xml.etree.ElementTree"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "VOCDataset",
          "lineno": 12,
          "docstring": "Object detection dataset for Pascal VOC (http://host.robots.ox.ac.uk/pascal/VOC/)",
          "methods": [
            {
              "name": "__init__",
              "lineno": 16,
              "docstring": "Dataset for VOC data.\n\nParameters:\n    root (string) -- path to the VOC2007 or VOC2012 dataset, containing the following sub-directories:\n                     Annotations, ImageSets, JPEGImages, SegmentationClass, SegmentationObject\n                     \n    is_test (bool) -- if true, then use the data subset from `ImageSets/Main/test.txt`\n                      if false, then use the data subset from `ImageSets/Main/trainval.txt`\n                      if these files don't exist, then `ImageSets/Main/default.txt` will be used"
            },
            {
              "name": "__getitem__",
              "lineno": 79,
              "docstring": null
            },
            {
              "name": "get_image",
              "lineno": 99,
              "docstring": null
            },
            {
              "name": "get_annotation",
              "lineno": 106,
              "docstring": null
            },
            {
              "name": "__len__",
              "lineno": 110,
              "docstring": null
            },
            {
              "name": "_read_image_ids",
              "lineno": 113,
              "docstring": null
            },
            {
              "name": "_get_num_annotations",
              "lineno": 133,
              "docstring": null
            },
            {
              "name": "_get_annotation",
              "lineno": 138,
              "docstring": null
            },
            {
              "name": "_find_image",
              "lineno": 174,
              "docstring": null
            },
            {
              "name": "_read_image",
              "lineno": 185,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L120",
        "print() found (prefer logging) at L127",
        "print() found (prefer logging) at L129",
        "print() found (prefer logging) at L168"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/collation.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [
        {
          "name": "object_detection_collate",
          "lineno": 5,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 3
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/open_images.py",
      "imports": [
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "pathlib"
          ]
        },
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "pandas"
          ]
        },
        {
          "module": null,
          "names": [
            "copy"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "OpenImagesDataset",
          "lineno": 9,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 11,
              "docstring": null
            },
            {
              "name": "_getitem",
              "lineno": 28,
              "docstring": null
            },
            {
              "name": "__getitem__",
              "lineno": 45,
              "docstring": null
            },
            {
              "name": "get_annotation",
              "lineno": 49,
              "docstring": "To conform the eval_ssd implementation that is based on the VOC dataset."
            },
            {
              "name": "get_image",
              "lineno": 55,
              "docstring": null
            },
            {
              "name": "_read_data",
              "lineno": 62,
              "docstring": null
            },
            {
              "name": "__len__",
              "lineno": 87,
              "docstring": null
            },
            {
              "name": "__repr__",
              "lineno": 90,
              "docstring": null
            },
            {
              "name": "_read_image",
              "lineno": 105,
              "docstring": null
            },
            {
              "name": "_balance_data",
              "lineno": 114,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L78",
        "print() found (prefer logging) at L84"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/squeezenet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.init"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.utils.model_zoo"
          ]
        }
      ],
      "functions": [
        {
          "name": "squeezenet1_0",
          "lineno": 104,
          "docstring": "SqueezeNet model architecture from the `\"SqueezeNet: AlexNet-level\naccuracy with 50x fewer parameters and <0.5MB model size\"\n<https://arxiv.org/abs/1602.07360>`_ paper.\n\nArgs:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "squeezenet1_1",
          "lineno": 118,
          "docstring": "SqueezeNet 1.1 model from the `official SqueezeNet repo\n<https://github.com/DeepScale/SqueezeNet/tree/master/SqueezeNet_v1.1>`_.\nSqueezeNet 1.1 has 2.4x less computation and slightly fewer parameters\nthan SqueezeNet 1.0, without sacrificing accuracy.\n\nArgs:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "Fire",
          "lineno": 17,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 19,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 32,
              "docstring": null
            }
          ]
        },
        {
          "name": "SqueezeNet",
          "lineno": 40,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 42,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 98,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/scaled_l2_norm.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ScaledL2Norm",
          "lineno": 6,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 7,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 14,
              "docstring": null
            },
            {
              "name": "reset_parameters",
              "lineno": 18,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/mobilenet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "MobileNetV1",
          "lineno": 7,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 8,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 47,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/vgg.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        }
      ],
      "functions": [
        {
          "name": "vgg",
          "lineno": 5,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/multibox_loss.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "utils",
          "names": [
            "box_utils"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "MultiboxLoss",
          "lineno": 9,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 10,
              "docstring": "Implement SSD Multibox Loss.\n\nBasically, Multibox loss combines classification loss\n and Smooth L1 regression loss."
            },
            {
              "name": "forward",
              "lineno": 25,
              "docstring": "Compute classification loss and smooth l1 loss.\n\nArgs:\n    confidence (batch_size, num_priors, num_classes): class predictions.\n    locations (batch_size, num_priors, 4): predicted locations.\n    labels (batch_size, num_priors): real labels of all the priors.\n    boxes (batch_size, num_priors, 4): real boxes corresponding all the priors."
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/alexnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.utils.model_zoo"
          ]
        }
      ],
      "functions": [
        {
          "name": "alexnet",
          "lineno": 51,
          "docstring": "AlexNet model architecture from the\n`\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n\nArgs:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "AlexNet",
          "lineno": 15,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 17,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 44,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/mobilenet_v2.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        }
      ],
      "functions": [
        {
          "name": "conv_bn",
          "lineno": 9,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "conv_1x1_bn",
          "lineno": 25,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "InvertedResidual",
          "lineno": 40,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 41,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 97,
              "docstring": null
            }
          ]
        },
        {
          "name": "MobileNetV2",
          "lineno": 104,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 105,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 154,
              "docstring": null
            },
            {
              "name": "_initialize_weights",
              "lineno": 160,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/ssd.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple"
          ]
        },
        {
          "module": "collections",
          "names": [
            "namedtuple"
          ]
        },
        {
          "module": "utils",
          "names": [
            "box_utils"
          ]
        }
      ],
      "functions": [
        {
          "name": "_xavier_init_",
          "lineno": 175,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "SSD",
          "lineno": 16,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 17,
              "docstring": "Compose a SSD model using the given components."
            },
            {
              "name": "forward",
              "lineno": 45,
              "docstring": null
            },
            {
              "name": "compute_header",
              "lineno": 114,
              "docstring": null
            },
            {
              "name": "init_from_base_net",
              "lineno": 125,
              "docstring": null
            },
            {
              "name": "init_from_pretrained_ssd",
              "lineno": 132,
              "docstring": null
            },
            {
              "name": "init",
              "lineno": 141,
              "docstring": null
            },
            {
              "name": "load",
              "lineno": 148,
              "docstring": null
            },
            {
              "name": "save",
              "lineno": 151,
              "docstring": null
            }
          ]
        },
        {
          "name": "MatchPrior",
          "lineno": 155,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 156,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 163,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/vgg_ssd.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch.nn",
          "names": [
            "Conv2d",
            "Sequential",
            "ModuleList",
            "ReLU",
            "BatchNorm2d"
          ]
        },
        {
          "module": "nn.vgg",
          "names": [
            "vgg"
          ]
        },
        {
          "module": "ssd",
          "names": [
            "SSD"
          ]
        },
        {
          "module": "predictor",
          "names": [
            "Predictor"
          ]
        },
        {
          "module": "config",
          "names": [
            "vgg_ssd_config"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_vgg_ssd",
          "lineno": 10,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_vgg_ssd_predictor",
          "lineno": 68,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "TODO/FIXME/HACK left in code at L52",
        "TODO/FIXME/HACK left in code at L61"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/fpn_mobilenetv1_ssd.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch.nn",
          "names": [
            "Conv2d",
            "Sequential",
            "ModuleList",
            "ReLU"
          ]
        },
        {
          "module": "nn.mobilenet",
          "names": [
            "MobileNetV1"
          ]
        },
        {
          "module": "fpn_ssd",
          "names": [
            "FPNSSD"
          ]
        },
        {
          "module": "predictor",
          "names": [
            "Predictor"
          ]
        },
        {
          "module": "config",
          "names": [
            "mobilenetv1_ssd_config"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_fpn_mobilenetv1_ssd",
          "lineno": 10,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_fpn_mobilenetv1_ssd_predictor",
          "lineno": 66,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "TODO/FIXME/HACK left in code at L50",
        "TODO/FIXME/HACK left in code at L59"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/mobilenetv1_ssd.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch.nn",
          "names": [
            "Conv2d",
            "Sequential",
            "ModuleList",
            "ReLU"
          ]
        },
        {
          "module": "nn.mobilenet",
          "names": [
            "MobileNetV1"
          ]
        },
        {
          "module": "ssd",
          "names": [
            "SSD"
          ]
        },
        {
          "module": "predictor",
          "names": [
            "Predictor"
          ]
        },
        {
          "module": "config",
          "names": [
            "mobilenetv1_ssd_config"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_mobilenetv1_ssd",
          "lineno": 10,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_mobilenetv1_ssd_predictor",
          "lineno": 66,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "TODO/FIXME/HACK left in code at L50",
        "TODO/FIXME/HACK left in code at L59"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/mobilenetv1_ssd_lite.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch.nn",
          "names": [
            "Conv2d",
            "Sequential",
            "ModuleList",
            "ReLU",
            "BatchNorm2d"
          ]
        },
        {
          "module": "nn.mobilenet",
          "names": [
            "MobileNetV1"
          ]
        },
        {
          "module": "ssd",
          "names": [
            "SSD"
          ]
        },
        {
          "module": "predictor",
          "names": [
            "Predictor"
          ]
        },
        {
          "module": "config",
          "names": [
            "mobilenetv1_ssd_config"
          ]
        }
      ],
      "functions": [
        {
          "name": "SeperableConv2d",
          "lineno": 10,
          "docstring": "Replace Conv2d with a depthwise Conv2d and Pointwise Conv2d.\n    ",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_mobilenetv1_ssd_lite",
          "lineno": 21,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_mobilenetv1_ssd_lite_predictor",
          "lineno": 73,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/mobilenet_v2_ssd_lite.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch.nn",
          "names": [
            "Conv2d",
            "Sequential",
            "ModuleList",
            "BatchNorm2d"
          ]
        },
        {
          "module": "torch",
          "names": [
            "nn"
          ]
        },
        {
          "module": "nn.mobilenet_v2",
          "names": [
            "MobileNetV2",
            "InvertedResidual"
          ]
        },
        {
          "module": "ssd",
          "names": [
            "SSD",
            "GraphPath"
          ]
        },
        {
          "module": "predictor",
          "names": [
            "Predictor"
          ]
        },
        {
          "module": "config",
          "names": [
            "mobilenetv1_ssd_config"
          ]
        }
      ],
      "functions": [
        {
          "name": "SeperableConv2d",
          "lineno": 11,
          "docstring": "Replace Conv2d with a depthwise Conv2d and Pointwise Conv2d.\n    ",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_mobilenetv2_ssd_lite",
          "lineno": 24,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_mobilenetv2_ssd_lite_predictor",
          "lineno": 62,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/predictor.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "utils",
          "names": [
            "box_utils"
          ]
        },
        {
          "module": "data_preprocessing",
          "names": [
            "PredictionTransform"
          ]
        },
        {
          "module": "utils.misc",
          "names": [
            "Timer"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Predictor",
          "lineno": 8,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 9,
              "docstring": null
            },
            {
              "name": "predict",
              "lineno": 27,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L40"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/fpn_ssd.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Tuple"
          ]
        },
        {
          "module": "utils",
          "names": [
            "box_utils"
          ]
        }
      ],
      "functions": [
        {
          "name": "_xavier_init_",
          "lineno": 140,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "FPNSSD",
          "lineno": 10,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 11,
              "docstring": "Compose a SSD model using the given components.\n        "
            },
            {
              "name": "forward",
              "lineno": 36,
              "docstring": null
            },
            {
              "name": "compute_header",
              "lineno": 88,
              "docstring": null
            },
            {
              "name": "init_from_base_net",
              "lineno": 99,
              "docstring": null
            },
            {
              "name": "init",
              "lineno": 106,
              "docstring": null
            },
            {
              "name": "load",
              "lineno": 113,
              "docstring": null
            },
            {
              "name": "save",
              "lineno": 116,
              "docstring": null
            }
          ]
        },
        {
          "name": "MatchPrior",
          "lineno": 120,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 121,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 128,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/squeezenet_ssd_lite.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torch.nn",
          "names": [
            "Conv2d",
            "Sequential",
            "ModuleList",
            "ReLU"
          ]
        },
        {
          "module": "nn.squeezenet",
          "names": [
            "squeezenet1_1"
          ]
        },
        {
          "module": "ssd",
          "names": [
            "SSD"
          ]
        },
        {
          "module": "predictor",
          "names": [
            "Predictor"
          ]
        },
        {
          "module": "config",
          "names": [
            "squeezenet_ssd_config"
          ]
        }
      ],
      "functions": [
        {
          "name": "SeperableConv2d",
          "lineno": 10,
          "docstring": "Replace Conv2d with a depthwise Conv2d and Pointwise Conv2d.\n    ",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_squeezenet_ssd_lite",
          "lineno": 21,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "create_squeezenet_ssd_lite_predictor",
          "lineno": 77,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/data_preprocessing.py",
      "imports": [
        {
          "module": "transforms.transforms",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "TrainAugmentation",
          "lineno": 4,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 5,
              "docstring": "Args:\n    size: the size the of final image.\n    mean: mean pixel value per channel."
            },
            {
              "name": "__call__",
              "lineno": 26,
              "docstring": "Args:\n    img: the output of cv.imread in RGB layout.\n    boxes: boundding boxes in the form of (x1, y1, x2, y2).\n    labels: labels of boxes."
            }
          ]
        },
        {
          "name": "TestTransform",
          "lineno": 37,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 38,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 47,
              "docstring": null
            }
          ]
        },
        {
          "name": "PredictionTransform",
          "lineno": 51,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 52,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 60,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/squeezenet_ssd_config.py",
      "imports": [
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "vision.utils.box_utils",
          "names": [
            "SSDSpec",
            "SSDBoxSizes",
            "generate_ssd_priors"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/vgg_ssd_config.py",
      "imports": [
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "vision.utils.box_utils",
          "names": [
            "SSDSpec",
            "SSDBoxSizes",
            "generate_ssd_priors"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/mobilenetv1_ssd_config.py",
      "imports": [
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "vision.utils.box_utils",
          "names": [
            "SSDSpec",
            "SSDBoxSizes",
            "generate_ssd_priors"
          ]
        },
        {
          "module": "vision.ssd.mobilenetv1_ssd",
          "names": [
            "create_mobilenetv1_ssd"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        }
      ],
      "functions": [
        {
          "name": "set_image_size",
          "lineno": 24,
          "docstring": null,
          "typed": false,
          "has_logging": true,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L67",
        "print() found (prefer logging) at L68",
        "print() found (prefer logging) at L69",
        "print() found (prefer logging) at L70",
        "print() found (prefer logging) at L71",
        "TODO/FIXME/HACK left in code at L36"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/test/test_vgg_ssd.py",
      "imports": [
        {
          "module": "ssd.vgg_ssd",
          "names": [
            "create_vgg_ssd"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "tempfile"
          ]
        }
      ],
      "functions": [
        {
          "name": "test_create_vgg_ssd",
          "lineno": 7,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_forward",
          "lineno": 12,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_save_model",
          "lineno": 25,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_save_load_model_consistency",
          "lineno": 32,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/test/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/prunning/prunner.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "logging"
          ]
        },
        {
          "module": "heapq",
          "names": [
            "nsmallest"
          ]
        },
        {
          "module": "utils.model_book",
          "names": [
            "ModelBook"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ModelPrunner",
          "lineno": 9,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 10,
              "docstring": "Implement the pruning algorithm described in the paper https://arxiv.org/pdf/1611.06440.pdf .\n\nThe prunning criteria is dC/dh * h, while C is the cost, h is the activation."
            },
            {
              "name": "_make_new_conv",
              "lineno": 28,
              "docstring": null
            },
            {
              "name": "remove_conv_filter",
              "lineno": 53,
              "docstring": null
            },
            {
              "name": "_make_new_linear",
              "lineno": 80,
              "docstring": null
            },
            {
              "name": "prune_conv_layers",
              "lineno": 107,
              "docstring": "Prune one conv2d filter.\n        "
            },
            {
              "name": "register_conv_hooks",
              "lineno": 130,
              "docstring": "Run register before training for pruning."
            },
            {
              "name": "deregister_hooks",
              "lineno": 166,
              "docstring": "Run degresiter before retraining to recover the model"
            },
            {
              "name": "prune_linear_layers",
              "lineno": 171,
              "docstring": null
            },
            {
              "name": "register_linear_hooks",
              "lineno": 192,
              "docstring": null
            },
            {
              "name": "remove_linear_feature",
              "lineno": 217,
              "docstring": null
            },
            {
              "name": "_update_model",
              "lineno": 230,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/prunning/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/transforms.py",
      "imports": [
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        },
        {
          "module": null,
          "names": [
            "random"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "torchvision",
          "names": [
            "transforms"
          ]
        },
        {
          "module": "torchvision.transforms",
          "names": [
            "functional"
          ]
        }
      ],
      "functions": [
        {
          "name": "pad_if_smaller",
          "lineno": 10,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "Compose",
          "lineno": 20,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 21,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 24,
              "docstring": null
            }
          ]
        },
        {
          "name": "Resize",
          "lineno": 30,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 31,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 34,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomResize",
          "lineno": 39,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 40,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 46,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomHorizontalFlip",
          "lineno": 53,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 54,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 57,
              "docstring": null
            }
          ]
        },
        {
          "name": "RandomCrop",
          "lineno": 64,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 65,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 68,
              "docstring": null
            }
          ]
        },
        {
          "name": "CenterCrop",
          "lineno": 77,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 78,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 81,
              "docstring": null
            }
          ]
        },
        {
          "name": "ToTensor",
          "lineno": 87,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 88,
              "docstring": null
            }
          ]
        },
        {
          "name": "Normalize",
          "lineno": 94,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 95,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 99,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/onnx_export.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.models"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L18",
        "print() found (prefer logging) at L27",
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L37",
        "print() found (prefer logging) at L38",
        "print() found (prefer logging) at L51",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L70",
        "print() found (prefer logging) at L72"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/train.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.utils.data"
          ]
        },
        {
          "module": "torch",
          "names": [
            "nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": "datasets.coco_utils",
          "names": [
            "get_coco"
          ]
        },
        {
          "module": "datasets.cityscapes_utils",
          "names": [
            "get_cityscapes"
          ]
        },
        {
          "module": "datasets.mhp",
          "names": [
            "MHPSegmentation"
          ]
        },
        {
          "module": null,
          "names": [
            "transforms"
          ]
        },
        {
          "module": null,
          "names": [
            "utils"
          ]
        }
      ],
      "functions": [
        {
          "name": "parse_args",
          "lineno": 37,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_dataset",
          "lineno": 84,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_transform",
          "lineno": 103,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "criterion",
          "lineno": 137,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "evaluate",
          "lineno": 151,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "train_one_epoch",
          "lineno": 172,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 194,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L199",
        "print() found (prefer logging) at L230",
        "print() found (prefer logging) at L231",
        "print() found (prefer logging) at L232",
        "print() found (prefer logging) at L256",
        "print() found (prefer logging) at L290",
        "print() found (prefer logging) at L310",
        "print() found (prefer logging) at L316",
        "print() found (prefer logging) at L320"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/onnx_validate.py",
      "imports": [
        {
          "module": null,
          "names": [
            "onnx"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L21",
        "print() found (prefer logging) at L22",
        "print() found (prefer logging) at L23",
        "print() found (prefer logging) at L26",
        "print() found (prefer logging) at L27",
        "print() found (prefer logging) at L28",
        "print() found (prefer logging) at L29",
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L34",
        "print() found (prefer logging) at L36"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/utils.py",
      "imports": [
        {
          "module": "__future__",
          "names": [
            "print_function"
          ]
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.distributed"
          ]
        },
        {
          "module": null,
          "names": [
            "errno"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "builtins"
          ]
        }
      ],
      "functions": [
        {
          "name": "cat_list",
          "lineno": 197,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "collate_fn",
          "lineno": 206,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mkdir",
          "lineno": 213,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "setup_for_distributed",
          "lineno": 221,
          "docstring": "This function disables printing when not in master process",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "is_dist_avail_and_initialized",
          "lineno": 236,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_world_size",
          "lineno": 244,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_rank",
          "lineno": 250,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "is_main_process",
          "lineno": 256,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_on_master",
          "lineno": 260,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "init_distributed_mode",
          "lineno": 265,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "SmoothedValue",
          "lineno": 13,
          "docstring": "Track a series of values and provide access to smoothed values over a\nwindow or the global series average.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 18,
              "docstring": null
            },
            {
              "name": "update",
              "lineno": 26,
              "docstring": null
            },
            {
              "name": "synchronize_between_processes",
              "lineno": 31,
              "docstring": "Warning: does not synchronize the deque!"
            },
            {
              "name": "median",
              "lineno": 45,
              "docstring": null
            },
            {
              "name": "avg",
              "lineno": 50,
              "docstring": null
            },
            {
              "name": "global_avg",
              "lineno": 55,
              "docstring": null
            },
            {
              "name": "max",
              "lineno": 59,
              "docstring": null
            },
            {
              "name": "value",
              "lineno": 63,
              "docstring": null
            },
            {
              "name": "__str__",
              "lineno": 66,
              "docstring": null
            }
          ]
        },
        {
          "name": "ConfusionMatrix",
          "lineno": 75,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 76,
              "docstring": null
            },
            {
              "name": "update",
              "lineno": 82,
              "docstring": null
            },
            {
              "name": "reset",
              "lineno": 91,
              "docstring": null
            },
            {
              "name": "compute",
              "lineno": 94,
              "docstring": null
            },
            {
              "name": "reduce_from_all_processes",
              "lineno": 103,
              "docstring": null
            },
            {
              "name": "__str__",
              "lineno": 111,
              "docstring": null
            }
          ]
        },
        {
          "name": "MetricLogger",
          "lineno": 124,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 125,
              "docstring": null
            },
            {
              "name": "update",
              "lineno": 129,
              "docstring": null
            },
            {
              "name": "__getattr__",
              "lineno": 136,
              "docstring": null
            },
            {
              "name": "__str__",
              "lineno": 144,
              "docstring": null
            },
            {
              "name": "synchronize_between_processes",
              "lineno": 152,
              "docstring": null
            },
            {
              "name": "add_meter",
              "lineno": 156,
              "docstring": null
            },
            {
              "name": "log_every",
              "lineno": 159,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L185",
        "print() found (prefer logging) at L194",
        "print() found (prefer logging) at L228",
        "print() found (prefer logging) at L276",
        "print() found (prefer logging) at L284"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/mhp_utils.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        }
      ],
      "functions": [
        {
          "name": "mhp_image_list",
          "lineno": 3,
          "docstring": "Read one of the image index lists from LV-MHP-v2/list\n\nParameters:\n        filename (string):  path to the image list file\n\nReturns:\n        list (int):  list of int's that correspond to image names",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/coco_utils.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "copy"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.utils.data"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        },
        {
          "module": "transforms",
          "names": [
            "Compose"
          ]
        },
        {
          "module": "pycocotools",
          "names": [
            "mask"
          ]
        }
      ],
      "functions": [
        {
          "name": "convert_coco_poly_to_mask",
          "lineno": 27,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_coco_remove_images_without_annotations",
          "lineno": 63,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_coco",
          "lineno": 85,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "FilterAndRemapCocoCategories",
          "lineno": 12,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 13,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 17,
              "docstring": null
            }
          ]
        },
        {
          "name": "ConvertCocoPolysToMask",
          "lineno": 44,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "lineno": 45,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/mhp.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        },
        {
          "module": "mhp_utils",
          "names": [
            "mhp_image_list"
          ]
        },
        {
          "module": "torch.utils.data",
          "names": [
            "Dataset",
            "DataLoader"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "MHPSegmentation",
          "lineno": 10,
          "docstring": "https://lv-mhp.github.io/dataset",
          "methods": [
            {
              "name": "__init__",
              "lineno": 13,
              "docstring": "Parameters:\n        root_dir (string): Root directory of the extracted LV-MHP-V2 dataset.\n        image_set (string, optional): Select the image_set to use, ``train``, ``val``\n        transforms (callable, optional): Optional transform to be applied\n                on a sample."
            },
            {
              "name": "__len__",
              "lineno": 38,
              "docstring": null
            },
            {
              "name": "__getitem__",
              "lineno": 41,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/cityscapes_remap.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "copy"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        },
        {
          "module": "multiprocessing",
          "names": [
            "Pool"
          ]
        }
      ],
      "functions": [
        {
          "name": "remap_labels",
          "lineno": 87,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L88"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/cityscapes_utils.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)? (cityscapes_utils.py, line 18)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/corrupt_images.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "warnings"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": "os",
          "names": [
            "listdir"
          ]
        },
        {
          "module": "os",
          "names": [
            "remove"
          ]
        },
        {
          "module": "os.path",
          "names": [
            "join"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L39",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L50",
        "print() found (prefer logging) at L57"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L1"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/mhp_remap.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "copy"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        },
        {
          "module": "mhp_utils",
          "names": [
            "mhp_image_list"
          ]
        },
        {
          "module": "multiprocessing",
          "names": [
            "Pool"
          ]
        }
      ],
      "functions": [
        {
          "name": "remap_labels",
          "lineno": 113,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L125",
        "print() found (prefer logging) at L133",
        "print() found (prefer logging) at L151"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/nuswide.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "csv"
          ]
        },
        {
          "module": null,
          "names": [
            "glob"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "NUSWideDataset",
          "lineno": 12,
          "docstring": "Dataloader for NUS-WIDE multi-label classification dataset\nhttps://lms.comp.nus.edu.sg/wp-content/uploads/2019/research/nuswide/NUS-WIDE.html\n\nTODO:  support custom labels and class culling",
          "methods": [
            {
              "name": "__init__",
              "lineno": 19,
              "docstring": "Load either the 'trainval' or 'test' set"
            },
            {
              "name": "__getitem__",
              "lineno": 45,
              "docstring": null
            },
            {
              "name": "__len__",
              "lineno": 57,
              "docstring": null
            },
            {
              "name": "read_image_list",
              "lineno": 60,
              "docstring": null
            },
            {
              "name": "read_labels",
              "lineno": 81,
              "docstring": null
            },
            {
              "name": "get_class_distribution",
              "lineno": 109,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L131",
        "print() found (prefer logging) at L139",
        "print() found (prefer logging) at L140",
        "print() found (prefer logging) at L144",
        "print() found (prefer logging) at L150",
        "print() found (prefer logging) at L153",
        "TODO/FIXME/HACK left in code at L17",
        "TODO/FIXME/HACK left in code at L102"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/voc.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": null,
          "names": [
            "xml.dom.minidom"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "VOCDataset",
          "lineno": 10,
          "docstring": "Multi-label classification dataset for Pascal VOC (http://host.robots.ox.ac.uk/pascal/VOC/)\nThis extracts objects (from the object detection benchmark) and uses them as image tags.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 15,
              "docstring": "Load the dataset (tested on VOC2012)\n\nParameters\n    root (string) -- path to the VOC2007 or VOC2012 dataset, containing the following sub-directories:\n                     Annotations, ImageSets, JPEGImages, SegmentationClass, SegmentationObject\n                     \n    set (string) -- the data subset, which corresponds to one of the files under ImageSets/Main/\n                    like 'train', 'trainval', 'test', 'val', ect."
            },
            {
              "name": "__getitem__",
              "lineno": 62,
              "docstring": null
            },
            {
              "name": "__len__",
              "lineno": 74,
              "docstring": null
            },
            {
              "name": "get_class_distribution",
              "lineno": 77,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L97",
        "print() found (prefer logging) at L101",
        "print() found (prefer logging) at L106",
        "print() found (prefer logging) at L107",
        "print() found (prefer logging) at L111",
        "print() found (prefer logging) at L117",
        "print() found (prefer logging) at L120"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/onnx_export.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.models"
          ]
        },
        {
          "module": "reshape",
          "names": [
            "reshape_model"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L23",
        "print() found (prefer logging) at L32",
        "print() found (prefer logging) at L35",
        "print() found (prefer logging) at L40",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L66",
        "print() found (prefer logging) at L79",
        "print() found (prefer logging) at L81"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/train.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "random"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "shutil"
          ]
        },
        {
          "module": null,
          "names": [
            "warnings"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.parallel"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.backends.cudnn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.optim"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.utils.data"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.transforms"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.datasets"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.models"
          ]
        },
        {
          "module": "torch.utils.tensorboard",
          "names": [
            "SummaryWriter"
          ]
        },
        {
          "module": "voc",
          "names": [
            "VOCDataset"
          ]
        },
        {
          "module": "nuswide",
          "names": [
            "NUSWideDataset"
          ]
        },
        {
          "module": "reshape",
          "names": [
            "reshape_model"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 102,
          "docstring": "Load dataset, setup model, and train for N epochs",
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "train",
          "lineno": 247,
          "docstring": "Train one epoch over the dataset",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "validate",
          "lineno": 305,
          "docstring": "Measure model performance across the val dataset",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_checkpoint",
          "lineno": 349,
          "docstring": "Save a model checkpoint file, along with the best-performing model if applicable",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "adjust_learning_rate",
          "lineno": 381,
          "docstring": "Sets the learning rate to the initial LR decayed by 10 every 30 epochs",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "accuracy",
          "lineno": 390,
          "docstring": "Computes the accuracy of predictions vs groundtruth",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "AverageMeter",
          "lineno": 411,
          "docstring": "Computes and stores the average and current value",
          "methods": [
            {
              "name": "__init__",
              "lineno": 415,
              "docstring": null
            },
            {
              "name": "reset",
              "lineno": 420,
              "docstring": null
            },
            {
              "name": "update",
              "lineno": 426,
              "docstring": null
            },
            {
              "name": "__str__",
              "lineno": 432,
              "docstring": null
            }
          ]
        },
        {
          "name": "ProgressMeter",
          "lineno": 437,
          "docstring": "Progress metering",
          "methods": [
            {
              "name": "__init__",
              "lineno": 441,
              "docstring": null
            },
            {
              "name": "display",
              "lineno": 446,
              "docstring": null
            },
            {
              "name": "_get_batch_fmtstr",
              "lineno": 451,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L96",
        "print() found (prefer logging) at L119",
        "print() found (prefer logging) at L153",
        "print() found (prefer logging) at L165",
        "print() found (prefer logging) at L168",
        "print() found (prefer logging) at L193",
        "print() found (prefer logging) at L201",
        "print() found (prefer logging) at L203",
        "print() found (prefer logging) at L227",
        "print() found (prefer logging) at L228",
        "print() found (prefer logging) at L229",
        "print() found (prefer logging) at L230",
        "print() found (prefer logging) at L231",
        "print() found (prefer logging) at L297",
        "print() found (prefer logging) at L369",
        "print() found (prefer logging) at L371",
        "print() found (prefer logging) at L378",
        "print() found (prefer logging) at L449"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/reshape.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": "torchvision.models.googlenet",
          "names": [
            "InceptionAux"
          ]
        }
      ],
      "functions": [
        {
          "name": "reshape_model",
          "lineno": 8,
          "docstring": "Reshape a model's output layers for the given number of classes",
          "typed": false,
          "has_logging": false,
          "raises": 1
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L14",
        "print() found (prefer logging) at L18",
        "print() found (prefer logging) at L22",
        "print() found (prefer logging) at L27",
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L35",
        "print() found (prefer logging) at L39",
        "print() found (prefer logging) at L45",
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L60"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/onnx_validate.py",
      "imports": [
        {
          "module": null,
          "names": [
            "onnx"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L22",
        "print() found (prefer logging) at L23",
        "print() found (prefer logging) at L24",
        "print() found (prefer logging) at L27",
        "print() found (prefer logging) at L28",
        "print() found (prefer logging) at L29",
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L32",
        "print() found (prefer logging) at L35",
        "print() found (prefer logging) at L37"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/setup.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: positional argument follows keyword argument (setup.py, line 27)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/onnx_export.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "trt_pose.models"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L22",
        "print() found (prefer logging) at L26",
        "print() found (prefer logging) at L29",
        "print() found (prefer logging) at L39",
        "print() found (prefer logging) at L40",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L58",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L71",
        "print() found (prefer logging) at L73"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/draw_objects.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "DrawObjects",
          "lineno": 4,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 6,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 9,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/train.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.optim"
          ]
        },
        {
          "module": null,
          "names": [
            "tqdm"
          ]
        },
        {
          "module": null,
          "names": [
            "apex.amp"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        },
        {
          "module": "coco",
          "names": [
            "CocoDataset",
            "CocoHumanPoseEval"
          ]
        },
        {
          "module": "models",
          "names": [
            "MODELS"
          ]
        }
      ],
      "functions": [
        {
          "name": "set_lr",
          "lineno": 23,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "save_checkpoint",
          "lineno": 28,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "write_log_entry",
          "lineno": 36,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L32",
        "print() found (prefer logging) at L39",
        "print() found (prefer logging) at L50",
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L105",
        "print() found (prefer logging) at L112",
        "print() found (prefer logging) at L121",
        "print() found (prefer logging) at L127"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/coco.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.utils.data"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "PIL.Image"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "tqdm"
          ]
        },
        {
          "module": null,
          "names": [
            "trt_pose"
          ]
        },
        {
          "module": null,
          "names": [
            "trt_pose.plugins"
          ]
        },
        {
          "module": null,
          "names": [
            "glob"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.transforms.functional"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "trt_pose.parse_objects",
          "names": [
            "ParseObjects"
          ]
        },
        {
          "module": null,
          "names": [
            "pycocotools"
          ]
        },
        {
          "module": null,
          "names": [
            "pycocotools.coco"
          ]
        },
        {
          "module": null,
          "names": [
            "pycocotools.cocoeval"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        }
      ],
      "functions": [
        {
          "name": "coco_category_to_topology",
          "lineno": 21,
          "docstring": "Gets topology tensor from a COCO category\n    ",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "coco_category_to_parts",
          "lineno": 35,
          "docstring": "Gets list of parts name from a COCO category\n    ",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "coco_annotations_to_tensors",
          "lineno": 41,
          "docstring": "Gets tensors corresponding to peak counts, peak coordinates, and peak to peak connections\n    ",
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "coco_annotations_to_mask_bbox",
          "lineno": 86,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "convert_dir_to_bmp",
          "lineno": 99,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_quad",
          "lineno": 109,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "transform_image",
          "lineno": 153,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "transform_points_xy",
          "lineno": 166,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "transform_peaks",
          "lineno": 181,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "CocoDataset",
          "lineno": 190,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 191,
              "docstring": null
            },
            {
              "name": "__len__",
              "lineno": 314,
              "docstring": null
            },
            {
              "name": "__getitem__",
              "lineno": 317,
              "docstring": null
            },
            {
              "name": "get_part_type_counts",
              "lineno": 369,
              "docstring": null
            },
            {
              "name": "get_paf_type_counts",
              "lineno": 372,
              "docstring": null
            }
          ]
        },
        {
          "name": "CocoHumanPoseEval",
          "lineno": 378,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 380,
              "docstring": null
            },
            {
              "name": "evaluate",
              "lineno": 395,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L223",
        "print() found (prefer logging) at L284",
        "print() found (prefer logging) at L303",
        "print() found (prefer logging) at L464"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/__init__.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/parse_objects.py",
      "imports": [
        {
          "module": null,
          "names": [
            "trt_pose.plugins"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ParseObjects",
          "lineno": 4,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 6,
              "docstring": null
            },
            {
              "name": "__call__",
              "lineno": 15,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/utils/export_for_isaac.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse",
            "json",
            "os",
            "re"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "trt_pose.models"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "lineno": 92,
          "docstring": "Loads PyTorch model from args.input_checkpoint, converts and saves it into args.output_model path\n\nArguments:\nargs: the parsed command line arguments",
          "typed": false,
          "has_logging": false,
          "raises": 3
        }
      ],
      "classes": [
        {
          "name": "InputReNormalization",
          "lineno": 60,
          "docstring": "This defines \"(input - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]\" custom operation\nto conform to \"Unit\" normalized input RGB data.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 65,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 70,
              "docstring": null
            }
          ]
        },
        {
          "name": "HeatmapMaxpoolAndPermute",
          "lineno": 74,
          "docstring": "This defines MaxPool2d(kernel_size = 3, stride = 1) and permute([0,2,3,1]) custom operation\nto conform to [part_affinity_fields, heatmap, maxpool_heatmap] output format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 79,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 83,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L132",
        "print() found (prefer logging) at L153",
        "print() found (prefer logging) at L159",
        "print() found (prefer logging) at L169",
        "print() found (prefer logging) at L180"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/utils/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/resnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": "common",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [
        {
          "name": "_resnet_pose",
          "lineno": 27,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet18_baseline",
          "lineno": 35,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet34_baseline",
          "lineno": 40,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet50_baseline",
          "lineno": 45,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet101_baseline",
          "lineno": 50,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet152_baseline",
          "lineno": 55,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_resnet_pose",
          "lineno": 60,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_resnet_pose_att",
          "lineno": 68,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet18_baseline_att",
          "lineno": 76,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet34_baseline_att",
          "lineno": 81,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet50_baseline_att",
          "lineno": 86,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet101_baseline_att",
          "lineno": 91,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resnet152_baseline_att",
          "lineno": 96,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "ResNetBackbone",
          "lineno": 6,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 8,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 12,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/common.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "UpsampleCBR",
          "lineno": 4,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 5,
              "docstring": null
            }
          ]
        },
        {
          "name": "SelectInput",
          "lineno": 28,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 30,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 34,
              "docstring": null
            }
          ]
        },
        {
          "name": "CmapPafHead",
          "lineno": 38,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 39,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 54,
              "docstring": null
            }
          ]
        },
        {
          "name": "CmapPafHeadAttention",
          "lineno": 58,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 59,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 69,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/dla.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "dla_up"
          ]
        }
      ],
      "functions": [
        {
          "name": "dla34up_pose",
          "lineno": 21,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "dla60up_pose",
          "lineno": 24,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "dla102up_pose",
          "lineno": 27,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "dla169up_pose",
          "lineno": 30,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "DlaWrapper",
          "lineno": 8,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 9,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 15,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/mnasnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": "common",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [
        {
          "name": "_mnasnet_pose",
          "lineno": 17,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_mnasnet_pose_att",
          "lineno": 25,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet0_5_baseline",
          "lineno": 33,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet0_75_baseline",
          "lineno": 38,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet1_0_baseline",
          "lineno": 43,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet1_3_baseline",
          "lineno": 48,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet0_5_baseline_att",
          "lineno": 54,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet0_75_baseline_att",
          "lineno": 59,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet1_0_baseline_att",
          "lineno": 64,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "mnasnet1_3_baseline_att",
          "lineno": 69,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "MnasnetBackbone",
          "lineno": 6,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 8,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 12,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/densenet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": "common",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [
        {
          "name": "_densenet_pose",
          "lineno": 17,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "_densenet_pose_att",
          "lineno": 25,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet121_baseline",
          "lineno": 33,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet169_baseline",
          "lineno": 38,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet201_baseline",
          "lineno": 43,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet161_baseline",
          "lineno": 48,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet121_baseline_att",
          "lineno": 54,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet169_baseline_att",
          "lineno": 59,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet201_baseline_att",
          "lineno": 64,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "densenet161_baseline_att",
          "lineno": 69,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "DenseNetBackbone",
          "lineno": 6,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 8,
              "docstring": null
            },
            {
              "name": "forward",
              "lineno": 12,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/__init__.py",
      "imports": [
        {
          "module": "resnet",
          "names": [
            "*"
          ]
        },
        {
          "module": "densenet",
          "names": [
            "*"
          ]
        },
        {
          "module": "mnasnet",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/tasks/human_pose/preprocess_coco_person.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "json"
          ]
        },
        {
          "module": null,
          "names": [
            "tqdm"
          ]
        }
      ],
      "functions": [
        {
          "name": "remove_link",
          "lineno": 6,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "add_link",
          "lineno": 20,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "append_neck_keypoint",
          "lineno": 25,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_cat",
          "lineno": 45,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "get_anns",
          "lineno": 48,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L63",
        "print() found (prefer logging) at L81"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson_utils/__init__.py",
      "imports": [
        {
          "module": "jetson_utils_python",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson/utils/__init__.py",
      "imports": [
        {
          "module": "jetson_utils_python",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L8"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/Jetson/__init__.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/Jetson/Utils/__init__.py",
      "imports": [
        {
          "module": "jetson_utils_python",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L8"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-streams.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "loadImage",
            "saveImage",
            "Log",
            "cudaStreamCreate",
            "cudaStreamDestroy",
            "cudaStreamSynchronize",
            "cudaStreamWaitEvent",
            "cudaMemcpy",
            "cudaMalloc",
            "cudaMallocMapped",
            "cudaEventCreate",
            "cudaEventDestroy",
            "cudaEventRecord",
            "cudaResize"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L23",
        "print() found (prefer logging) at L24",
        "print() found (prefer logging) at L35",
        "print() found (prefer logging) at L36",
        "print() found (prefer logging) at L41",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L81"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-examples.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped",
            "cudaConvertColor",
            "cudaCrop",
            "cudaResize",
            "cudaMemcpy",
            "cudaDeviceSynchronize",
            "cudaDrawCircle",
            "cudaDrawLine",
            "cudaDrawRect",
            "loadImage",
            "saveImage"
          ]
        }
      ],
      "functions": [
        {
          "name": "convert_color",
          "lineno": 41,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "crop",
          "lineno": 48,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resize",
          "lineno": 63,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L75",
        "print() found (prefer logging) at L76",
        "print() found (prefer logging) at L95",
        "print() found (prefer logging) at L96",
        "print() found (prefer logging) at L101",
        "print() found (prefer logging) at L102",
        "print() found (prefer logging) at L107",
        "print() found (prefer logging) at L108",
        "print() found (prefer logging) at L113",
        "print() found (prefer logging) at L114",
        "print() found (prefer logging) at L128"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-display.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "glDisplay"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L44"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-pytorch.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaImage",
            "cudaNormalize"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [
        {
          "name": "tensor_image_format",
          "lineno": 47,
          "docstring": "Determine the cudaImage format string (eg 'rgb32f', 'rgba32f', ect) from a PyTorch tensor.\nOnly float and uint8 tensors are supported because those datatypes are supported by cudaImage.",
          "typed": false,
          "has_logging": false,
          "raises": 3
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L77",
        "print() found (prefer logging) at L78",
        "print() found (prefer logging) at L79",
        "print() found (prefer logging) at L80",
        "print() found (prefer logging) at L81",
        "print() found (prefer logging) at L82",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L88",
        "print() found (prefer logging) at L94",
        "print() found (prefer logging) at L95"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-logging.py",
      "imports": [
        {
          "module": "jetson_utils",
          "names": [
            "Log"
          ]
        }
      ],
      "functions": [
        {
          "name": "log_messages",
          "lineno": 26,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/video-viewer.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L39",
        "print() found (prefer logging) at L40"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-cv.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaFromNumpy",
            "cudaAllocMapped",
            "cudaConvertColor",
            "cudaDeviceSynchronize",
            "saveImage"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L47",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L62",
        "print() found (prefer logging) at L63",
        "print() found (prefer logging) at L69"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-array-interface.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped",
            "cudaDeviceSynchronize"
          ]
        },
        {
          "module": null,
          "names": [
            "cupy"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda.driver"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda.autoinit"
          ]
        },
        {
          "module": "pycuda.compiler",
          "names": [
            "SourceModule"
          ]
        },
        {
          "module": "numba",
          "names": [
            "guvectorize"
          ]
        }
      ],
      "functions": [
        {
          "name": "test_numpy",
          "lineno": 30,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_cupy",
          "lineno": 36,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_pycuda",
          "lineno": 48,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_numba",
          "lineno": 83,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L33",
        "print() found (prefer logging) at L34",
        "print() found (prefer logging) at L40",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L45",
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L80",
        "print() found (prefer logging) at L81",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L90",
        "print() found (prefer logging) at L102",
        "print() found (prefer logging) at L103",
        "print() found (prefer logging) at L115",
        "print() found (prefer logging) at L120",
        "print() found (prefer logging) at L121"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-numpy.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaImage",
            "cudaToNumpy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L40",
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L60"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-video.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L39",
        "print() found (prefer logging) at L40",
        "Hardcoded video device path at L34"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-cv.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "loadImage",
            "cudaAllocMapped",
            "cudaConvertColor",
            "cudaDeviceSynchronize",
            "cudaToNumpy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L62",
        "print() found (prefer logging) at L67"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-pytorch.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaImage"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L49",
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L58",
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L62",
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L67",
        "print() found (prefer logging) at L71"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-numpy.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaFromNumpy",
            "saveImageRGBA"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L45",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L65"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-streams.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "loadImage",
            "saveImage",
            "Log",
            "cudaStreamCreate",
            "cudaStreamDestroy",
            "cudaStreamSynchronize",
            "cudaStreamWaitEvent",
            "cudaMemcpy",
            "cudaMalloc",
            "cudaMallocMapped",
            "cudaEventCreate",
            "cudaEventDestroy",
            "cudaEventRecord",
            "cudaResize"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L23",
        "print() found (prefer logging) at L24",
        "print() found (prefer logging) at L35",
        "print() found (prefer logging) at L36",
        "print() found (prefer logging) at L41",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L81"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/depthnet_utils.py",
      "imports": [
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "depthBuffers",
          "lineno": 26,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "docstring": null
            },
            {
              "name": "Alloc",
              "lineno": 35,
              "docstring": null
            }
          ]
        }
      ],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "detectNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L43",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L73",
        "print() found (prefer logging) at L76"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-examples.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped",
            "cudaConvertColor",
            "cudaCrop",
            "cudaResize",
            "cudaMemcpy",
            "cudaDeviceSynchronize",
            "cudaDrawCircle",
            "cudaDrawLine",
            "cudaDrawRect",
            "loadImage",
            "saveImage"
          ]
        }
      ],
      "functions": [
        {
          "name": "convert_color",
          "lineno": 41,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "crop",
          "lineno": 48,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "resize",
          "lineno": 63,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L75",
        "print() found (prefer logging) at L76",
        "print() found (prefer logging) at L95",
        "print() found (prefer logging) at L96",
        "print() found (prefer logging) at L101",
        "print() found (prefer logging) at L102",
        "print() found (prefer logging) at L107",
        "print() found (prefer logging) at L108",
        "print() found (prefer logging) at L113",
        "print() found (prefer logging) at L114",
        "print() found (prefer logging) at L128"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-display.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "glDisplay"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L44"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/backgroundnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "backgroundNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "loadImage",
            "Log",
            "cudaAllocMapped",
            "cudaMemcpy",
            "cudaResize",
            "cudaOverlay"
          ]
        }
      ],
      "functions": [
        {
          "name": "replaceBackground",
          "lineno": 63,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Bare except at L44",
        "print() found (prefer logging) at L45"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-pytorch.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaImage",
            "cudaNormalize"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [
        {
          "name": "tensor_image_format",
          "lineno": 47,
          "docstring": "Determine the cudaImage format string (eg 'rgb32f', 'rgba32f', ect) from a PyTorch tensor.\nOnly float and uint8 tensors are supported because those datatypes are supported by cudaImage.",
          "typed": false,
          "has_logging": false,
          "raises": 3
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L77",
        "print() found (prefer logging) at L78",
        "print() found (prefer logging) at L79",
        "print() found (prefer logging) at L80",
        "print() found (prefer logging) at L81",
        "print() found (prefer logging) at L82",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L88",
        "print() found (prefer logging) at L94",
        "print() found (prefer logging) at L95"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/posenet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "poseNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L43",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L67",
        "print() found (prefer logging) at L70",
        "print() found (prefer logging) at L71",
        "print() found (prefer logging) at L72"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-logging.py",
      "imports": [
        {
          "module": "jetson_utils",
          "names": [
            "Log"
          ]
        }
      ],
      "functions": [
        {
          "name": "log_messages",
          "lineno": 26,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/segnet_utils.py",
      "imports": [
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped",
            "cudaToNumpy"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "segmentationBuffers",
          "lineno": 28,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 29,
              "docstring": null
            },
            {
              "name": "output",
              "lineno": 48,
              "docstring": null
            },
            {
              "name": "Alloc",
              "lineno": 56,
              "docstring": null
            },
            {
              "name": "ComputeStats",
              "lineno": 74,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L84",
        "print() found (prefer logging) at L85",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L88",
        "print() found (prefer logging) at L89",
        "print() found (prefer logging) at L93"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet-snap.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "datetime"
          ]
        },
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "detectNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "saveImage",
            "Log",
            "cudaAllocMapped",
            "cudaCrop",
            "cudaDeviceSynchronize"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L57",
        "print() found (prefer logging) at L58",
        "print() found (prefer logging) at L86",
        "print() found (prefer logging) at L91"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/video-viewer.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L39",
        "print() found (prefer logging) at L40"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-cv.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaFromNumpy",
            "cudaAllocMapped",
            "cudaConvertColor",
            "cudaDeviceSynchronize",
            "saveImage"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L47",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L62",
        "print() found (prefer logging) at L63",
        "print() found (prefer logging) at L69"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-array-interface.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaAllocMapped",
            "cudaDeviceSynchronize"
          ]
        },
        {
          "module": null,
          "names": [
            "cupy"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda.driver"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda.autoinit"
          ]
        },
        {
          "module": "pycuda.compiler",
          "names": [
            "SourceModule"
          ]
        },
        {
          "module": "numba",
          "names": [
            "guvectorize"
          ]
        }
      ],
      "functions": [
        {
          "name": "test_numpy",
          "lineno": 30,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_cupy",
          "lineno": 36,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_pycuda",
          "lineno": 48,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_numba",
          "lineno": 83,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L31",
        "print() found (prefer logging) at L33",
        "print() found (prefer logging) at L34",
        "print() found (prefer logging) at L40",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L45",
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L80",
        "print() found (prefer logging) at L81",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L90",
        "print() found (prefer logging) at L102",
        "print() found (prefer logging) at L103",
        "print() found (prefer logging) at L115",
        "print() found (prefer logging) at L120",
        "print() found (prefer logging) at L121"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-models.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource"
          ]
        }
      ],
      "functions": [
        {
          "name": "log",
          "lineno": 90,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "image_diff",
          "lineno": 94,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "compare_images",
          "lineno": 108,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_images",
          "lineno": 143,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_model",
          "lineno": 173,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "test_module",
          "lineno": 191,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "run_tests",
          "lineno": 197,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Bare except at L118",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L91",
        "print() found (prefer logging) at L144",
        "print() found (prefer logging) at L161",
        "print() found (prefer logging) at L174",
        "print() found (prefer logging) at L192",
        "print() found (prefer logging) at L210",
        "print() found (prefer logging) at L211",
        "print() found (prefer logging) at L214",
        "print() found (prefer logging) at L216",
        "print() found (prefer logging) at L217"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-numpy.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaImage",
            "cudaToNumpy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L40",
        "print() found (prefer logging) at L46",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L60"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/my-recognition.py",
      "imports": [
        {
          "module": "jetson_inference",
          "names": [
            "imageNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "loadImage"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L51"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/segnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "segNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaOverlay",
            "cudaDeviceSynchronize",
            "Log"
          ]
        },
        {
          "module": "segnet_utils",
          "names": [
            "*"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L48",
        "print() found (prefer logging) at L49"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-video.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L39",
        "print() found (prefer logging) at L40",
        "Hardcoded video device path at L34"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/my-detection.py",
      "imports": [
        {
          "module": "jetson_inference",
          "names": [
            "detectNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Hardcoded video device path at L28"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/depthnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "depthNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaOverlay",
            "cudaDeviceSynchronize",
            "Log"
          ]
        },
        {
          "module": "depthnet_utils",
          "names": [
            "depthBuffers"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L49",
        "print() found (prefer logging) at L50"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-cv.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "loadImage",
            "cudaAllocMapped",
            "cudaConvertColor",
            "cudaDeviceSynchronize",
            "cudaToNumpy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L52",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L62",
        "print() found (prefer logging) at L67"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/actionnet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "actionNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaFont",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L41",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L67"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-pytorch.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaImage"
          ]
        },
        {
          "module": null,
          "names": [
            "torch"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L49",
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L56",
        "print() found (prefer logging) at L57",
        "print() found (prefer logging) at L58",
        "print() found (prefer logging) at L59",
        "print() found (prefer logging) at L62",
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L67",
        "print() found (prefer logging) at L71"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/imagenet.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sys"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": "jetson_inference",
          "names": [
            "imageNet"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource",
            "videoOutput",
            "cudaFont",
            "Log"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "Bare except at L42",
        "print() found (prefer logging) at L43",
        "print() found (prefer logging) at L79"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-numpy.py",
      "imports": [
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "cudaFromNumpy",
            "saveImageRGBA"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L45",
        "print() found (prefer logging) at L61",
        "print() found (prefer logging) at L65"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_numpy.py",
      "imports": [
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L6",
        "print() found (prefer logging) at L8"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_protobuf.py",
      "imports": [
        {
          "module": null,
          "names": [
            "google.protobuf"
          ]
        },
        {
          "module": "google.protobuf.internal",
          "names": [
            "api_implementation"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L12",
        "print() found (prefer logging) at L13",
        "print() found (prefer logging) at L18"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_opencv.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cv2"
          ]
        },
        {
          "module": null,
          "names": [
            "sys"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L7",
        "print() found (prefer logging) at L8",
        "print() found (prefer logging) at L11",
        "print() found (prefer logging) at L13",
        "print() found (prefer logging) at L14",
        "print() found (prefer logging) at L19",
        "print() found (prefer logging) at L33"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_torchaudio.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torchaudio"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L4",
        "print() found (prefer logging) at L7",
        "print() found (prefer logging) at L10",
        "print() found (prefer logging) at L12"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_sklearn.py",
      "imports": [
        {
          "module": null,
          "names": [
            "sklearn"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L7"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_tensorflow.py",
      "imports": [
        {
          "module": null,
          "names": [
            "tensorflow"
          ]
        },
        {
          "module": null,
          "names": [
            "urllib"
          ]
        },
        {
          "module": null,
          "names": [
            "tarfile"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "os"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L6",
        "print() found (prefer logging) at L33",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L58",
        "print() found (prefer logging) at L60"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_torchvision.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision"
          ]
        },
        {
          "module": null,
          "names": [
            "time"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.transforms"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.datasets"
          ]
        },
        {
          "module": null,
          "names": [
            "torchvision.models"
          ]
        }
      ],
      "functions": [
        {
          "name": "test_nms",
          "lineno": 12,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "load_data",
          "lineno": 64,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_model",
          "lineno": 76,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "print_results",
          "lineno": 139,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "accuracy",
          "lineno": 147,
          "docstring": "Computes the accuracy over the k top predictions for the specified values of k",
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [
        {
          "name": "AverageMeter",
          "lineno": 163,
          "docstring": "Computes and stores the average and current value",
          "methods": [
            {
              "name": "__init__",
              "lineno": 165,
              "docstring": null
            },
            {
              "name": "reset",
              "lineno": 170,
              "docstring": null
            },
            {
              "name": "update",
              "lineno": 176,
              "docstring": null
            },
            {
              "name": "__str__",
              "lineno": 182,
              "docstring": null
            }
          ]
        },
        {
          "name": "ProgressMeter",
          "lineno": 186,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 187,
              "docstring": null
            },
            {
              "name": "display",
              "lineno": 192,
              "docstring": null
            },
            {
              "name": "_get_batch_fmtstr",
              "lineno": 197,
              "docstring": null
            }
          ]
        }
      ],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L7",
        "print() found (prefer logging) at L13",
        "print() found (prefer logging) at L62",
        "print() found (prefer logging) at L82",
        "print() found (prefer logging) at L83",
        "print() found (prefer logging) at L84",
        "print() found (prefer logging) at L85",
        "print() found (prefer logging) at L87",
        "print() found (prefer logging) at L93",
        "print() found (prefer logging) at L140",
        "print() found (prefer logging) at L141",
        "print() found (prefer logging) at L142",
        "print() found (prefer logging) at L143",
        "print() found (prefer logging) at L144",
        "print() found (prefer logging) at L145",
        "print() found (prefer logging) at L195",
        "print() found (prefer logging) at L205",
        "print() found (prefer logging) at L206",
        "print() found (prefer logging) at L208",
        "print() found (prefer logging) at L209",
        "print() found (prefer logging) at L210",
        "print() found (prefer logging) at L224",
        "print() found (prefer logging) at L225",
        "print() found (prefer logging) at L226",
        "print() found (prefer logging) at L227",
        "print() found (prefer logging) at L237",
        "print() found (prefer logging) at L238"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_scipy.py",
      "imports": [
        {
          "module": null,
          "names": [
            "scipy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L7"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_vpi.py",
      "imports": [
        {
          "module": null,
          "names": [
            "vpi"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        },
        {
          "module": "PIL",
          "names": [
            "Image"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L20",
        "print() found (prefer logging) at L24"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_tensorrt.py",
      "imports": [
        {
          "module": null,
          "names": [
            "tensorrt"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L7"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_pandas.py",
      "imports": [
        {
          "module": null,
          "names": [
            "pandas"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L6",
        "print() found (prefer logging) at L8"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_onnx.py",
      "imports": [
        {
          "module": null,
          "names": [
            "onnx"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L7"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_cupy.py",
      "imports": [
        {
          "module": null,
          "names": [
            "cupy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L6",
        "print() found (prefer logging) at L8",
        "print() found (prefer logging) at L11",
        "print() found (prefer logging) at L13",
        "print() found (prefer logging) at L15",
        "print() found (prefer logging) at L16"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_cuda.py",
      "imports": [
        {
          "module": null,
          "names": [
            "pycuda"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda.driver"
          ]
        },
        {
          "module": null,
          "names": [
            "pycuda.autoinit"
          ]
        },
        {
          "module": "pycuda.compiler",
          "names": [
            "SourceModule"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L14",
        "print() found (prefer logging) at L15",
        "print() found (prefer logging) at L16",
        "print() found (prefer logging) at L20",
        "print() found (prefer logging) at L21",
        "print() found (prefer logging) at L22",
        "print() found (prefer logging) at L25",
        "print() found (prefer logging) at L39",
        "print() found (prefer logging) at L51",
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L55",
        "print() found (prefer logging) at L57"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_pytorch.py",
      "imports": [
        {
          "module": null,
          "names": [
            "torch"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn"
          ]
        },
        {
          "module": null,
          "names": [
            "torch.nn.functional"
          ]
        }
      ],
      "functions": [],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L2",
        "print() found (prefer logging) at L5",
        "print() found (prefer logging) at L6",
        "print() found (prefer logging) at L7",
        "print() found (prefer logging) at L9",
        "print() found (prefer logging) at L13",
        "print() found (prefer logging) at L16",
        "print() found (prefer logging) at L19",
        "print() found (prefer logging) at L22",
        "print() found (prefer logging) at L29",
        "print() found (prefer logging) at L32",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L44",
        "print() found (prefer logging) at L47",
        "print() found (prefer logging) at L53",
        "print() found (prefer logging) at L54",
        "print() found (prefer logging) at L64",
        "print() found (prefer logging) at L65",
        "print() found (prefer logging) at L66",
        "print() found (prefer logging) at L71"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_numba.py",
      "imports": [
        {
          "module": null,
          "names": [
            "math"
          ]
        },
        {
          "module": null,
          "names": [
            "numba"
          ]
        },
        {
          "module": "numba",
          "names": [
            "vectorize",
            "guvectorize",
            "cuda"
          ]
        },
        {
          "module": null,
          "names": [
            "numpy"
          ]
        }
      ],
      "functions": [
        {
          "name": "cu_discriminant",
          "lineno": 16,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "cu_add_arrays",
          "lineno": 39,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L1",
        "print() found (prefer logging) at L8",
        "print() found (prefer logging) at L11",
        "print() found (prefer logging) at L29",
        "print() found (prefer logging) at L30",
        "print() found (prefer logging) at L33",
        "print() found (prefer logging) at L47",
        "print() found (prefer logging) at L48",
        "print() found (prefer logging) at L50"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/tools/imagenet-download.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)? (imagenet-download.py, line 149)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/tools/coco2kitti.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": "pycocotools.coco",
          "names": [
            "COCO"
          ]
        }
      ],
      "functions": [
        {
          "name": "coco2kitti",
          "lineno": 9,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L65"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/jetson-inference/tools/test-models.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        },
        {
          "module": null,
          "names": [
            "subprocess"
          ]
        },
        {
          "module": null,
          "names": [
            "pprint"
          ]
        },
        {
          "module": "jetson_utils",
          "names": [
            "videoSource"
          ]
        }
      ],
      "functions": [
        {
          "name": "log",
          "lineno": 90,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "image_diff",
          "lineno": 94,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "compare_images",
          "lineno": 108,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_images",
          "lineno": 143,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "test_model",
          "lineno": 173,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 1
        },
        {
          "name": "test_module",
          "lineno": 191,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "run_tests",
          "lineno": 197,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Bare except at L118",
        "print() found (prefer logging) at L42",
        "print() found (prefer logging) at L91",
        "print() found (prefer logging) at L144",
        "print() found (prefer logging) at L161",
        "print() found (prefer logging) at L174",
        "print() found (prefer logging) at L192",
        "print() found (prefer logging) at L210",
        "print() found (prefer logging) at L211",
        "print() found (prefer logging) at L214",
        "print() found (prefer logging) at L216",
        "print() found (prefer logging) at L217"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/9u0zr0-codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-ffmpeg-launch-logic-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/03l5r9-codex/update-ffmpeg-command-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-ffmpeg-command-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/ol4ikh-codex/fix-permission-error-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-permission-error-in-run_uploaded_film.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/jdzw36-codex/fix-audio-capture-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-audio-capture-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/improve-robustness-of-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (improve-robustness-of-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-fourcc-codec-in-record_video.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (update-fourcc-codec-in-record_video.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-output-filename-generation-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (update-output-filename-generation-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-streaming-stability-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-streaming-stability-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/improve-ffmpeg-crash-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (improve-ffmpeg-crash-handling-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-streaming-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-streaming-issues-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-low-audio-volume-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-low-audio-volume-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-logging-typeerror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-logging-typeerror-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-permission-error-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-permission-error-in-run_uploaded_film.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-logging-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-logging-in-run_uploaded_film.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-ffmpeg-video-filter-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-ffmpeg-video-filter-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-oserror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-oserror-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/add-drive-summary-generator-to-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (add-drive-summary-generator-to-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/locate-references-to-roster.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (locate-references-to-roster.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/refactor-camera-initialization-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (refactor-camera-initialization-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-ffmpeg-command-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (update-ffmpeg-command-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/improve-error-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (improve-error-handling-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-syntaxerror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-syntaxerror-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-ffmpeg-streaming-issues-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-audio-and-video-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-audio-and-video-issues-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (update-ffmpeg-launch-logic-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-audio-capture-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-audio-capture-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-camera-detection-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (update-camera-detection-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/create-master-runner-script-run_gameday.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (create-master-runner-script-run_gameday.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-syntax-errors-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-syntax-errors-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/add-stream-health-monitor-to-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (add-stream-health-monitor-to-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-infinite-restart-loop-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-infinite-restart-loop-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-rtmp-disconnect-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-rtmp-disconnect-handling-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-ffmpeg-settings-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (update-ffmpeg-settings-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-launch_ffmpeg-function-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (update-launch_ffmpeg-function-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-stream-key-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-stream-key-handling-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/sofpf3-codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-ffmpeg-streaming-issues-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/c2gej5-codex/update-ffmpeg-command-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-ffmpeg-command-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/ol4ikh-codex/fix-permission-error-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-fourcc-codec-in-record_video.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-output-filename-generation-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-streaming-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-logging-typeerror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-permission-error-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-logging-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-ffmpeg-video-filter-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-oserror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/add-drive-summary-generator-to-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-ffmpeg-command-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-syntax-errors-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/add-stream-health-monitor-to-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-ffmpeg-settings-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/9u0zr0-codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-ffmpeg-launch-logic-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/03l5r9-codex/update-ffmpeg-command-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-ffmpeg-command-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/ol4ikh-codex/fix-permission-error-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/jdzw36-codex/fix-audio-capture-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/improve-robustness-of-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (improve-robustness-of-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-fourcc-codec-in-record_video.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-output-filename-generation-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-streaming-stability-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-streaming-stability-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/improve-ffmpeg-crash-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-streaming-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-streaming-issues-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-low-audio-volume-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-low-audio-volume-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-logging-typeerror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-logging-typeerror-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-permission-error-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-logging-in-run_uploaded_film.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-logging-in-run_uploaded_film.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-ffmpeg-video-filter-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-ffmpeg-video-filter-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-oserror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-oserror-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/add-drive-summary-generator-to-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/locate-references-to-roster.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (locate-references-to-roster.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/refactor-camera-initialization-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (refactor-camera-initialization-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-ffmpeg-command-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/improve-error-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (improve-error-handling-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-syntaxerror-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-audio-and-video-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-audio-capture-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-audio-capture-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-camera-detection-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/create-master-runner-script-run_gameday.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (create-master-runner-script-run_gameday.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-syntax-errors-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-syntax-errors-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/add-stream-health-monitor-to-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-infinite-restart-loop-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-infinite-restart-loop-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-rtmp-disconnect-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (fix-rtmp-disconnect-handling-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-ffmpeg-settings-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-launch_ffmpeg-function-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-stream-key-handling-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": []
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/sofpf3-codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (fix-ffmpeg-streaming-issues-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/c2gej5-codex/update-ffmpeg-command-in-stream_to_youtube.py",
      "imports": [],
      "functions": [],
      "classes": [],
      "issues": [
        "SyntaxError: invalid decimal literal (update-ffmpeg-command-in-stream_to_youtube.py, line 1)"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/tools/preflight_gameday.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os",
            "subprocess",
            "sys",
            "shutil"
          ]
        }
      ],
      "functions": [
        {
          "name": "ok",
          "lineno": 4,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "warn",
          "lineno": 5,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "bad",
          "lineno": 6,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "have",
          "lineno": 8,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "check_cmds",
          "lineno": 10,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "check_env",
          "lineno": 18,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "run",
          "lineno": 23,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "quick_devices",
          "lineno": 29,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 37,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L38",
        "print() found (prefer logging) at L39",
        "print() found (prefer logging) at L40",
        "print() found (prefer logging) at L41",
        "print() found (prefer logging) at L42"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/tools/audit_gameday.py",
      "imports": [
        {
          "module": null,
          "names": [
            "os",
            "re",
            "sys",
            "json",
            "ast",
            "subprocess",
            "shlex",
            "textwrap",
            "shutil"
          ]
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ]
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Tuple"
          ]
        },
        {
          "module": null,
          "names": [
            "argparse"
          ]
        }
      ],
      "functions": [
        {
          "name": "sh",
          "lineno": 52,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "list_repo_files",
          "lineno": 61,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "ast_audit",
          "lineno": 75,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "stream_runtime_checks",
          "lineno": 161,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "summarize_findings",
          "lineno": 206,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "render_markdown",
          "lineno": 251,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 304,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "Bare except at L257",
        "print() found (prefer logging) at L41",
        "print() found (prefer logging) at L218",
        "print() found (prefer logging) at L259",
        "print() found (prefer logging) at L297",
        "print() found (prefer logging) at L329",
        "Hardcoded video device path at L189",
        "TODO/FIXME/HACK left in code at L6",
        "TODO/FIXME/HACK left in code at L6",
        "TODO/FIXME/HACK left in code at L46",
        "TODO/FIXME/HACK left in code at L46",
        "TODO/FIXME/HACK left in code at L46",
        "TODO/FIXME/HACK left in code at L220",
        "TODO/FIXME/HACK left in code at L220",
        "TODO/FIXME/HACK left in code at L220",
        "TODO/FIXME/HACK left in code at L261",
        "TODO/FIXME/HACK left in code at L261",
        "TODO/FIXME/HACK left in code at L261",
        "TODO/FIXME/HACK left in code at L298",
        "TODO/FIXME/HACK left in code at L298",
        "TODO/FIXME/HACK left in code at L298"
      ]
    },
    {
      "file": "/home/scott/mca-gameday-camera/tools/auto_instrument_logging.py",
      "imports": [
        {
          "module": null,
          "names": [
            "re",
            "sys",
            "pathlib"
          ]
        }
      ],
      "functions": [
        {
          "name": "ensure_logging_header",
          "lineno": 14,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "convert_prints",
          "lineno": 22,
          "docstring": null,
          "typed": true,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "process",
          "lineno": 30,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        },
        {
          "name": "main",
          "lineno": 39,
          "docstring": null,
          "typed": false,
          "has_logging": false,
          "raises": 0
        }
      ],
      "classes": [],
      "issues": [
        "print() found (prefer logging) at L37"
      ]
    }
  ],
  "report": {
    "static": {
      "files_scanned": 358,
      "files_with_bare_except": [
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/backgroundnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/posenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet-snap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/segnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/depthnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/actionnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/imagenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/dataset.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/html/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-streams.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/video-viewer.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-video.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-streams.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/backgroundnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/posenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet-snap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/video-viewer.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-models.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/segnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-video.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/depthnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/actionnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/imagenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/tools/test-models.py",
        "/home/scott/mca-gameday-camera/tools/audit_gameday.py"
      ],
      "files_with_prints": [
        "/home/scott/mca-gameday-camera/game_uploader.py",
        "/home/scott/mca-gameday-camera/admin_tools.py",
        "/home/scott/mca-gameday-camera/generate_scouting_report.py",
        "/home/scott/mca-gameday-camera/training_workflow.py",
        "/home/scott/mca-gameday-camera/ai_trainer.py",
        "/home/scott/mca-gameday-camera/retrain_models.py",
        "/home/scott/mca-gameday-camera/film_dashboard.py",
        "/home/scott/mca-gameday-camera/play_classifier.py",
        "/home/scott/mca-gameday-camera/camera_test.py",
        "/home/scott/mca-gameday-camera/email_alerts.py",
        "/home/scott/mca-gameday-camera/assignment_analyzer.py",
        "/home/scott/mca-gameday-camera/youtube_livestream.py",
        "/home/scott/mca-gameday-camera/generate_install_plan.py",
        "/home/scott/mca-gameday-camera/play_recognizer.py",
        "/home/scott/mca-gameday-camera/run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/motion_detector.py",
        "/home/scott/mca-gameday-camera/sync_to_drive.py",
        "/home/scott/mca-gameday-camera/practice_trainer.py",
        "/home/scott/mca-gameday-camera/ffmpeg_utils.py",
        "/home/scott/mca-gameday-camera/generate_coaches_cut_and_summary.py",
        "/home/scott/mca-gameday-camera/manual_video_processor.py",
        "/home/scott/mca-gameday-camera/highlight_recorder.py",
        "/home/scott/mca-gameday-camera/process_all_uploaded_videos.py",
        "/home/scott/mca-gameday-camera/annotate_clip.py",
        "/home/scott/mca-gameday-camera/reclassify_old_clips.py",
        "/home/scott/mca-gameday-camera/postgame_review.py",
        "/home/scott/mca-gameday-camera/build_highlight_dataset.py",
        "/home/scott/mca-gameday-camera/list_hw_encoders.py",
        "/home/scott/mca-gameday-camera/drive_service_uploader.py",
        "/home/scott/mca-gameday-camera/coach_assistant.py",
        "/home/scott/mca-gameday-camera/youtube_uploader.py",
        "/home/scott/mca-gameday-camera/play_count_tracker.py",
        "/home/scott/mca-gameday-camera/train_play_classifier.py",
        "/home/scott/mca-gameday-camera/gdrive_utils.py",
        "/home/scott/mca-gameday-camera/record_video.py",
        "/home/scott/mca-gameday-camera/jersey_detector.py",
        "/home/scott/mca-gameday-camera/install_firefox_esr.py",
        "/home/scott/mca-gameday-camera/scoreboard_reader.py",
        "/home/scott/mca-gameday-camera/generate_hudl_csv.py",
        "/home/scott/mca-gameday-camera/visual_player_tracker.py",
        "/home/scott/mca-gameday-camera/upload_to_drive.py",
        "/home/scott/mca-gameday-camera/train_model.py",
        "/home/scott/mca-gameday-camera/send_postgame_email.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson_inference/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson/inference/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/Jetson/Inference/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/backgroundnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/posenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/segnet_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet-snap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/my-recognition.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/segnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/depthnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/actionnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/imagenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/dataset.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/app.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/app.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/config.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/server.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/video_player.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/test_card.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/navbar.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/model_options.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/actions.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/grid.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/stream_options.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/html/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/html/app.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/eval_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/open_images_downloader.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/run_ssd_example.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/model_book.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/generate_vocdata.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/voc_dataset.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/open_images.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/predictor.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/mobilenetv1_ssd_config.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/train.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/onnx_validate.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/cityscapes_remap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/corrupt_images.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/mhp_remap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/nuswide.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/voc.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/train.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/reshape.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/onnx_validate.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/train.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/coco.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/utils/export_for_isaac.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/tasks/human_pose/preprocess_coco_person.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson_utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson/utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/Jetson/Utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-streams.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-examples.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-display.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/video-viewer.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-array-interface.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-video.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-streams.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-examples.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-display.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/backgroundnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/posenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/segnet_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet-snap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/video-viewer.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-array-interface.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-models.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/my-recognition.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/segnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-video.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/depthnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/actionnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/imagenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_protobuf.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_opencv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_torchaudio.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_sklearn.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_tensorflow.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_torchvision.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_scipy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_vpi.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_tensorrt.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_pandas.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_onnx.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_cupy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_cuda.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_numba.py",
        "/home/scott/mca-gameday-camera/jetson-inference/tools/coco2kitti.py",
        "/home/scott/mca-gameday-camera/jetson-inference/tools/test-models.py",
        "/home/scott/mca-gameday-camera/tools/preflight_gameday.py",
        "/home/scott/mca-gameday-camera/tools/audit_gameday.py",
        "/home/scott/mca-gameday-camera/tools/auto_instrument_logging.py"
      ],
      "files_with_todos": [
        "/home/scott/mca-gameday-camera/play_tracker.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/dataset.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/config.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/server.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/video_player.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/model_options.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/vgg_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/fpn_mobilenetv1_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/mobilenetv1_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/mobilenetv1_ssd_config.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/nuswide.py",
        "/home/scott/mca-gameday-camera/tools/audit_gameday.py"
      ],
      "files_missing_logging": [
        "/home/scott/mca-gameday-camera/game_uploader.py",
        "/home/scott/mca-gameday-camera/admin_tools.py",
        "/home/scott/mca-gameday-camera/generate_scouting_report.py",
        "/home/scott/mca-gameday-camera/training_workflow.py",
        "/home/scott/mca-gameday-camera/ai_trainer.py",
        "/home/scott/mca-gameday-camera/retrain_models.py",
        "/home/scott/mca-gameday-camera/film_dashboard.py",
        "/home/scott/mca-gameday-camera/play_classifier.py",
        "/home/scott/mca-gameday-camera/clean_labels.py",
        "/home/scott/mca-gameday-camera/play_recommender.py",
        "/home/scott/mca-gameday-camera/camera_test.py",
        "/home/scott/mca-gameday-camera/email_alerts.py",
        "/home/scott/mca-gameday-camera/roster.py",
        "/home/scott/mca-gameday-camera/assignment_analyzer.py",
        "/home/scott/mca-gameday-camera/generate_coaching_report.py",
        "/home/scott/mca-gameday-camera/youtube_livestream.py",
        "/home/scott/mca-gameday-camera/generate_install_plan.py",
        "/home/scott/mca-gameday-camera/ai_performance_dashboard.py",
        "/home/scott/mca-gameday-camera/play_recognizer.py",
        "/home/scott/mca-gameday-camera/auto_tracker.py",
        "/home/scott/mca-gameday-camera/run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/motion_detector.py",
        "/home/scott/mca-gameday-camera/sync_to_drive.py",
        "/home/scott/mca-gameday-camera/generate_highlights.py",
        "/home/scott/mca-gameday-camera/practice_trainer.py",
        "/home/scott/mca-gameday-camera/generate_coaches_cut_and_summary.py",
        "/home/scott/mca-gameday-camera/review_queue.py",
        "/home/scott/mca-gameday-camera/manual_video_processor.py",
        "/home/scott/mca-gameday-camera/highlight_recorder.py",
        "/home/scott/mca-gameday-camera/formation_detector.py",
        "/home/scott/mca-gameday-camera/process_all_uploaded_videos.py",
        "/home/scott/mca-gameday-camera/env_loader.py",
        "/home/scott/mca-gameday-camera/ai_detector.py",
        "/home/scott/mca-gameday-camera/annotate_clip.py",
        "/home/scott/mca-gameday-camera/smart_auto_tracker.py",
        "/home/scott/mca-gameday-camera/reclassify_old_clips.py",
        "/home/scott/mca-gameday-camera/postgame_review.py",
        "/home/scott/mca-gameday-camera/build_highlight_dataset.py",
        "/home/scott/mca-gameday-camera/list_hw_encoders.py",
        "/home/scott/mca-gameday-camera/dashboard.py",
        "/home/scott/mca-gameday-camera/play_inference.py",
        "/home/scott/mca-gameday-camera/coach_review_app.py",
        "/home/scott/mca-gameday-camera/coach_assistant.py",
        "/home/scott/mca-gameday-camera/youtube_uploader.py",
        "/home/scott/mca-gameday-camera/stream_diagnostics.py",
        "/home/scott/mca-gameday-camera/play_count_tracker.py",
        "/home/scott/mca-gameday-camera/play_tracker.py",
        "/home/scott/mca-gameday-camera/highlight_dataset.py",
        "/home/scott/mca-gameday-camera/train_play_classifier.py",
        "/home/scott/mca-gameday-camera/gdrive_utils.py",
        "/home/scott/mca-gameday-camera/google_sheets_uploader.py",
        "/home/scott/mca-gameday-camera/record_video.py",
        "/home/scott/mca-gameday-camera/jersey_detector.py",
        "/home/scott/mca-gameday-camera/update_player_stats.py",
        "/home/scott/mca-gameday-camera/config.py",
        "/home/scott/mca-gameday-camera/predict_next_play.py",
        "/home/scott/mca-gameday-camera/install_firefox_esr.py",
        "/home/scott/mca-gameday-camera/scoreboard_reader.py",
        "/home/scott/mca-gameday-camera/live_dashboard.py",
        "/home/scott/mca-gameday-camera/generate_hudl_csv.py",
        "/home/scott/mca-gameday-camera/visual_player_tracker.py",
        "/home/scott/mca-gameday-camera/upload_to_drive.py",
        "/home/scott/mca-gameday-camera/train_model.py",
        "/home/scott/mca-gameday-camera/send_postgame_email.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson_inference/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/jetson/inference/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/Jetson/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/python/Jetson/Inference/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/depthnet_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/backgroundnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/posenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/segnet_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/detectnet-snap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/my-recognition.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/segnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/my-detection.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/depthnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/actionnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/examples/imagenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/dataset.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/app.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/recognizer/utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/app.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/flask/utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/app.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/config.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/actions/alert.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/model.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/server.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/filter.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/event.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/action.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/server/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/event_timeline.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/event_table.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/video_player.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/test_card.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/navbar.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/model_options.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/actions.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/grid.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/card.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/help.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/stream_options.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/dash/layout/alerts.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/html/stream.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/www/html/app.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/eval_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/run_ssd_example.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/misc.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/box_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/box_utils_numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/model_book.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/measurements.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/transforms/transforms.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/transforms/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/generate_vocdata.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/voc_dataset.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/collation.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/datasets/open_images.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/squeezenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/scaled_l2_norm.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/mobilenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/vgg.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/multibox_loss.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/alexnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/mobilenet_v2.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/nn/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/vgg_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/fpn_mobilenetv1_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/mobilenetv1_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/mobilenetv1_ssd_lite.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/mobilenet_v2_ssd_lite.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/predictor.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/fpn_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/squeezenet_ssd_lite.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/data_preprocessing.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/squeezenet_ssd_config.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/vgg_ssd_config.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/ssd/config/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/test/test_vgg_ssd.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/test/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/prunning/prunner.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/detection/ssd/vision/prunning/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/transforms.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/train.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/onnx_validate.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/mhp_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/coco_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/mhp.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/cityscapes_remap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/cityscapes_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/corrupt_images.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/segmentation/datasets/mhp_remap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/nuswide.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/voc.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/train.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/reshape.py",
        "/home/scott/mca-gameday-camera/jetson-inference/python/training/classification/onnx_validate.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/setup.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/onnx_export.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/draw_objects.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/train.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/coco.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/parse_objects.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/utils/export_for_isaac.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/resnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/common.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/dla.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/mnasnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/densenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/trt_pose/models/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/c/plugins/pose/tasks/human_pose/preprocess_coco_person.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson_utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/jetson/utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/Jetson/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/python/Jetson/Utils/__init__.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-streams.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-examples.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-display.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-logging.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/video-viewer.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-array-interface.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/test-video.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-to-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/utils/python/examples/cuda-from-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-streams.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/depthnet_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-examples.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-display.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/backgroundnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/posenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-logging.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/segnet_utils.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/detectnet-snap.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/video-viewer.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-array-interface.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-models.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/my-recognition.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/segnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/test-video.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/my-detection.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/depthnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-cv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/actionnet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-to-pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/imagenet.py",
        "/home/scott/mca-gameday-camera/jetson-inference/build/aarch64/bin/cuda-from-numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_numpy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_protobuf.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_opencv.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_torchaudio.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_sklearn.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_tensorflow.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_torchvision.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_scipy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_vpi.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_tensorrt.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_pandas.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_onnx.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_cupy.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_cuda.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_pytorch.py",
        "/home/scott/mca-gameday-camera/jetson-inference/docker/containers/test/test_numba.py",
        "/home/scott/mca-gameday-camera/jetson-inference/tools/imagenet-download.py",
        "/home/scott/mca-gameday-camera/jetson-inference/tools/coco2kitti.py",
        "/home/scott/mca-gameday-camera/jetson-inference/tools/test-models.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/9u0zr0-codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/03l5r9-codex/update-ffmpeg-command-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/ol4ikh-codex/fix-permission-error-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/jdzw36-codex/fix-audio-capture-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/improve-robustness-of-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-fourcc-codec-in-record_video.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-output-filename-generation-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-streaming-stability-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/improve-ffmpeg-crash-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-streaming-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-low-audio-volume-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-logging-typeerror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-permission-error-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-logging-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-ffmpeg-video-filter-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-oserror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/add-drive-summary-generator-to-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/locate-references-to-roster.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/refactor-camera-initialization-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-ffmpeg-command-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/improve-error-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-syntaxerror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-audio-and-video-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-audio-capture-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-camera-detection-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/create-master-runner-script-run_gameday.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-syntax-errors-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/add-stream-health-monitor-to-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-infinite-restart-loop-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-rtmp-disconnect-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-ffmpeg-settings-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/update-launch_ffmpeg-function-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/codex/fix-stream-key-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/sofpf3-codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/remotes/Desktop/c2gej5-codex/update-ffmpeg-command-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/ol4ikh-codex/fix-permission-error-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-fourcc-codec-in-record_video.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-output-filename-generation-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-streaming-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-logging-typeerror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-permission-error-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-logging-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-ffmpeg-video-filter-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-oserror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/add-drive-summary-generator-to-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-ffmpeg-command-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/fix-syntax-errors-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/add-stream-health-monitor-to-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/logs/refs/heads/codex/update-ffmpeg-settings-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/9u0zr0-codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/03l5r9-codex/update-ffmpeg-command-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/ol4ikh-codex/fix-permission-error-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/jdzw36-codex/fix-audio-capture-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/improve-robustness-of-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-fourcc-codec-in-record_video.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-output-filename-generation-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-streaming-stability-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/improve-ffmpeg-crash-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-streaming-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-low-audio-volume-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-logging-typeerror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-permission-error-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-logging-in-run_uploaded_film.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-ffmpeg-video-filter-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-oserror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/add-drive-summary-generator-to-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/locate-references-to-roster.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/refactor-camera-initialization-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-ffmpeg-command-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/improve-error-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-syntaxerror-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-audio-and-video-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-ffmpeg-launch-logic-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-audio-capture-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-camera-detection-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/create-master-runner-script-run_gameday.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-syntax-errors-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/add-stream-health-monitor-to-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-infinite-restart-loop-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-rtmp-disconnect-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-ffmpeg-settings-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/update-launch_ffmpeg-function-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/codex/fix-stream-key-handling-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/sofpf3-codex/fix-ffmpeg-streaming-issues-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/.git/refs/remotes/Desktop/c2gej5-codex/update-ffmpeg-command-in-stream_to_youtube.py",
        "/home/scott/mca-gameday-camera/tools/preflight_gameday.py",
        "/home/scott/mca-gameday-camera/tools/audit_gameday.py",
        "/home/scott/mca-gameday-camera/tools/auto_instrument_logging.py"
      ]
    },
    "runtime": {
      "ffmpeg": {
        "present": true,
        "version": "ffmpeg version 4.4.2-1ubuntu0.1 Copyright (c) 2000-2021 the FFmpeg developers"
      },
      "v4l2": {
        "formats": [
          "ioctl: VIDIOC_ENUM_FMT",
          "\tType: Video Capture",
          "",
          "\t[0]: 'MJPG' (Motion-JPEG, compressed)",
          "\t\tSize: Discrete 3840x2160",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 2560x1440",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 1920x1080",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 1280x720",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 640x480",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t[1]: 'H264' (H.264, compressed)",
          "\t\tSize: Discrete 3840x2160",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 2560x1440",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 1920x1080",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 1280x720",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 640x480",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t[2]: 'YUYV' (YUYV 4:2:2)",
          "\t\tSize: Discrete 3840x2160",
          "\t\t\tInterval: Discrete 0.067s (15.000 fps)",
          "\t\tSize: Discrete 2560x1440",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 1920x1080",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 1280x720",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)",
          "\t\tSize: Discrete 640x480",
          "\t\t\tInterval: Discrete 0.017s (60.000 fps)",
          "\t\t\tInterval: Discrete 0.033s (30.000 fps)"
        ]
      },
      "alsa": {
        "cards": [
          "**** List of CAPTURE Hardware Devices ****",
          "card 1: II [R\u00d8DE VideoMic GO II], device 0: USB Audio [USB Audio]",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 0: tegra-dlink-0 XBAR-ADMAIF1-0 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 1: tegra-dlink-1 XBAR-ADMAIF2-1 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 2: tegra-dlink-2 XBAR-ADMAIF3-2 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 3: tegra-dlink-3 XBAR-ADMAIF4-3 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 4: tegra-dlink-4 XBAR-ADMAIF5-4 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 5: tegra-dlink-5 XBAR-ADMAIF6-5 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 6: tegra-dlink-6 XBAR-ADMAIF7-6 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 7: tegra-dlink-7 XBAR-ADMAIF8-7 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 8: tegra-dlink-8 XBAR-ADMAIF9-8 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 9: tegra-dlink-9 XBAR-ADMAIF10-9 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 10: tegra-dlink-10 XBAR-ADMAIF11-10 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 11: tegra-dlink-11 XBAR-ADMAIF12-11 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 12: tegra-dlink-12 XBAR-ADMAIF13-12 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 13: tegra-dlink-13 XBAR-ADMAIF14-13 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 14: tegra-dlink-14 XBAR-ADMAIF15-14 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 15: tegra-dlink-15 XBAR-ADMAIF16-15 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 16: tegra-dlink-16 XBAR-ADMAIF17-16 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 17: tegra-dlink-17 XBAR-ADMAIF18-17 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 18: tegra-dlink-18 XBAR-ADMAIF19-18 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0",
          "card 2: APE [NVIDIA Jetson Orin Nano APE], device 19: tegra-dlink-19 XBAR-ADMAIF20-19 []",
          "  Subdevices: 1/1",
          "  Subdevice #0: subdevice #0"
        ]
      },
      "env": {
        "YT_RTMP_URL": ""
      },
      "encoders": {
        "available": "Encoders:\n V..... = Video\n A..... = Audio\n S..... = Subtitle\n .F.... = Frame-level multithreading\n ..S... = Slice-level multithreading\n ...X.. = Codec is experimental\n ....B. = Supports draw_horiz_band\n .....D = Supports direct rendering method 1\n ------\n V..... a64multi             Multicolor charset for Commodore 64 (codec a64_multi)\n V..... a64multi5            Multicolor charset for Commodore 64, extended with 5th color (colram) (codec a64_multi5)\n V..... alias_pix            Alias/Wavefront PIX image\n V..... amv                  AMV Video\n V..... apng                 APNG (Animated Portable Network Graphics) image\n V..... asv1                 ASUS V1\n V..... asv2                 ASUS V2\n V..... libaom-av1           libaom AV1 (codec av1)\n V..... avrp                 Avid 1:1 10-bit RGB Packer\n V..X.. avui                 Avid Meridien Uncompressed\n V..... ayuv                 Uncompressed packed MS 4:4:4:4\n V..... bmp                  BMP (Windows and OS/2 bitmap)\n VF.... cfhd                 GoPro CineForm HD\n V..... cinepak              Cinepak\n V..... cljr                 Cirrus Logic AccuPak\n V.S... vc2                  SMPTE VC-2 (codec dirac)\n VFS... dnxhd                VC3/DNxHD\n V..... dpx                  DPX (Digital Picture Exchange) image\n VFS... dvvideo              DV (Digital Video)\n VF.... exr                  OpenEXR image\n V.S... ffv1                 FFmpeg video codec #1\n VF.... ffvhuff              Huffyuv FFmpeg variant\n V..... fits                 Flexible Image Transport System\n V..... flashsv              Flash Screen Video\n V..... flashsv2             Flash Screen Video Version 2\n V..... flv                  FLV / Sorenson Spark / Sorenson H.263 (Flash Video) (codec flv1)\n V..... gif                  GIF (Graphics Interchange Format)\n V..... h261                 H.261\n V..... h263                 H.263 / H.263-1996\n V..... h263_v4l2m2m         V4L2 mem2mem H.263 encoder wrapper (codec h263)\n V.S... h263p                H.263+ / H.263-1998 / H.263 version 2\n V..... libx264              libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 (codec h264)\n V..... libx264rgb           libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 RGB (codec h264)\n V..... h264_omx             OpenMAX IL H.264 video encoder (codec h264)\n V..... h264_v4l2m2m         V4L2 mem2mem H.264 encoder wrapper (codec h264)\n V..... hap                  Vidvox Hap\n V..... libx265              libx265 H.265 / HEVC (codec hevc)\n V..... hevc_v4l2m2m         V4L2 mem2mem HEVC encoder wrapper (codec hevc)\n VF.... huffyuv              Huffyuv / HuffYUV\n V..... jpeg2000             JPEG 2000\n VF.... libopenjpeg          OpenJPEG JPEG 2000 (codec jpeg2000)\n VF.... jpegls               JPEG-LS\n VF.... ljpeg                Lossless JPEG\n VF.... magicyuv             MagicYUV video\n VFS... mjpeg                MJPEG (Motion JPEG)\n V.S... mpeg1video           MPEG-1 video\n V.S... mpeg2video           MPEG-2 video\n V.S... mpeg4                MPEG-4 part 2\n V..... libxvid              libxvidcore MPEG-4 part 2 (codec mpeg4)\n V..... mpeg4_omx            OpenMAX IL MPEG-4 video encoder (codec mpeg4)\n V..... mpeg4_v4l2m2m        V4L2 mem2mem MPEG4 encoder wrapper (codec mpeg4)\n V..... msmpeg4v2            MPEG-4 part 2 Microsoft variant version 2\n V..... msmpeg4              MPEG-4 part 2 Microsoft variant version 3 (codec msmpeg4v3)\n V..... msvideo1             Microsoft Video-1\n V..... pam                  PAM (Portable AnyMap) image\n V..... pbm                  PBM (Portable BitMap) image\n V..... pcx                  PC Paintbrush PCX image\n V..... pfm                  PFM (Portable FloatMap) image\n V..... pgm                  PGM (Portable GrayMap) image\n V..... pgmyuv               PGMYUV (Portable GrayMap YUV) image\n VF.... png                  PNG (Portable Network Graphics) image\n V..... ppm                  PPM (Portable PixelMap) image\n VF.... prores               Apple ProRes\n VF.... prores_aw            Apple ProRes (codec prores)\n VFS... prores_ks            Apple ProRes (iCodec Pro) (codec prores)\n V..... qtrle                QuickTime Animation (RLE) video\n V..... r10k                 AJA Kona 10-bit RGB Codec\n V..... r210                 Uncompressed RGB 10-bit\n V..... rawvideo             raw video\n V..... roqvideo             id RoQ video (codec roq)\n V..... rpza                 QuickTime video (RPZA)\n V..... rv10                 RealVideo 1.0\n V..... rv20                 RealVideo 2.0\n V..... sgi                  SGI image\n V..... snow                 Snow\n V..... speedhq              NewTek SpeedHQ\n V..... sunrast              Sun Rasterfile image\n V..... svq1                 Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1\n V..... targa                Truevision Targa image\n V..... libtheora            libtheora Theora (codec theora)\n VF.... tiff                 TIFF image\n VF.... utvideo              Ut Video\n V..... v210                 Uncompressed 4:2:2 10-bit\n V..... v308                 Uncompressed packed 4:4:4\n V..... v408                 Uncompressed packed QT 4:4:4:4\n V..... v410                 Uncompressed 4:4:4 10-bit\n V..... libvpx               libvpx VP8 (codec vp8)\n V..... vp8_v4l2m2m          V4L2 mem2mem VP8 encoder wrapper (codec vp8)\n V..... libvpx-vp9           libvpx VP9 (codec vp9)\n V..... libwebp_anim         libwebp WebP image (codec webp)\n V..... libwebp              libwebp WebP image (codec webp)\n V..... wmv1                 Windows Media Video 7\n V..... wmv2                 Windows Media Video 8\n V..... wrapped_avframe      AVFrame to AVPacket passthrough\n V..... xbm                  XBM (X BitMap) image\n V..... xface                X-face image\n V..... xwd                  XWD (X Window Dump) image\n V..... y41p                 Uncompressed YUV 4:1:1 12-bit\n V..... yuv4                 Uncompressed packed 4:2:0\n VF.... zlib                 LCL (LossLess Codec Library) ZLIB\n V..... zmbv                 Zip Motion Blocks Video\n A..... aac                  AAC (Advanced Audio Coding)\n A..... ac3                  ATSC A/52A (AC-3)\n A..... ac3_fixed            ATSC A/52A (AC-3) (codec ac3)\n A..... adpcm_adx            SEGA CRI ADX ADPCM\n A..... adpcm_argo           ADPCM Argonaut Games\n A..... g722                 G.722 ADPCM (codec adpcm_g722)\n A..... g726                 G.726 ADPCM (codec adpcm_g726)\n A..... g726le               G.726 little endian ADPCM (\"right-justified\") (codec adpcm_g726le)\n A..... adpcm_ima_alp        ADPCM IMA High Voltage Software ALP\n A..... adpcm_ima_amv        ADPCM IMA AMV\n A..... adpcm_ima_apm        ADPCM IMA Ubisoft APM\n A..... adpcm_ima_qt         ADPCM IMA QuickTime\n A..... adpcm_ima_ssi        ADPCM IMA Simon & Schuster Interactive\n A..... adpcm_ima_wav        ADPCM IMA WAV\n A..... adpcm_ms             ADPCM Microsoft\n A..... adpcm_swf            ADPCM Shockwave Flash\n A..... adpcm_yamaha         ADPCM Yamaha\n A..... alac                 ALAC (Apple Lossless Audio Codec)\n A..... aptx                 aptX (Audio Processing Technology for Bluetooth)\n A..... aptx_hd              aptX HD (Audio Processing Technology for Bluetooth)\n A..... libcodec2            codec2 encoder using libcodec2 (codec codec2)\n A..... comfortnoise         RFC 3389 comfort noise generator\n A..X.. dca                  DCA (DTS Coherent Acoustics) (codec dts)\n A..... eac3                 ATSC A/52 E-AC-3\n A..... flac                 FLAC (Free Lossless Audio Codec)\n A..... g723_1               G.723.1\n A..... libgsm               libgsm GSM (codec gsm)\n A..... libgsm_ms            libgsm GSM Microsoft variant (codec gsm_ms)\n A..X.. mlp                  MLP (Meridian Lossless Packing)\n A..... mp2                  MP2 (MPEG audio layer 2)\n A..... mp2fixed             MP2 fixed point (MPEG audio layer 2) (codec mp2)\n A..... libtwolame           libtwolame MP2 (MPEG audio layer 2) (codec mp2)\n A..... libmp3lame           libmp3lame MP3 (MPEG audio layer 3) (codec mp3)\n A..... libshine             libshine MP3 (MPEG audio layer 3) (codec mp3)\n A..... nellymoser           Nellymoser Asao\n A..X.. opus                 Opus\n A..... libopus              libopus Opus (codec opus)\n A..... pcm_alaw             PCM A-law / G.711 A-law\n A..... pcm_dvd              PCM signed 16|20|24-bit big-endian for DVD media\n A..... pcm_f32be            PCM 32-bit floating point big-endian\n A..... pcm_f32le            PCM 32-bit floating point little-endian\n A..... pcm_f64be            PCM 64-bit floating point big-endian\n A..... pcm_f64le            PCM 64-bit floating point little-endian\n A..... pcm_mulaw            PCM mu-law / G.711 mu-law\n A..... pcm_s16be            PCM signed 16-bit big-endian\n A..... pcm_s16be_planar     PCM signed 16-bit big-endian planar\n A..... pcm_s16le            PCM signed 16-bit little-endian\n A..... pcm_s16le_planar     PCM signed 16-bit little-endian planar\n A..... pcm_s24be            PCM signed 24-bit big-endian\n A..... pcm_s24daud          PCM D-Cinema audio signed 24-bit\n A..... pcm_s24le            PCM signed 24-bit little-endian\n A..... pcm_s24le_planar     PCM signed 24-bit little-endian planar\n A..... pcm_s32be            PCM signed 32-bit big-endian\n A..... pcm_s32le            PCM signed 32-bit little-endian\n A..... pcm_s32le_planar     PCM signed 32-bit little-endian planar\n A..... pcm_s64be            PCM signed 64-bit big-endian\n A..... pcm_s64le            PCM signed 64-bit little-endian\n A..... pcm_s8               PCM signed 8-bit\n A..... pcm_s8_planar        PCM signed 8-bit planar\n A..... pcm_u16be            PCM unsigned 16-bit big-endian\n A..... pcm_u16le            PCM unsigned 16-bit little-endian\n A..... pcm_u24be            PCM unsigned 24-bit big-endian\n A..... pcm_u24le            PCM unsigned 24-bit little-endian\n A..... pcm_u32be            PCM unsigned 32-bit big-endian\n A..... pcm_u32le            PCM unsigned 32-bit little-endian\n A..... pcm_u8               PCM unsigned 8-bit\n A..... pcm_vidc             PCM Archimedes VIDC\n A..... real_144             RealAudio 1.0 (14.4K) (codec ra_144)\n A..... roq_dpcm             id RoQ DPCM\n A..X.. s302m                SMPTE 302M\n A..... sbc                  SBC (low-complexity subband codec)\n A..X.. sonic                Sonic\n A..X.. sonicls              Sonic lossless\n A..... libspeex             libspeex Speex (codec speex)\n A..X.. truehd               TrueHD\n A..... tta                  TTA (True Audio)\n A..X.. vorbis               Vorbis\n A..... libvorbis            libvorbis (codec vorbis)\n A..... wavpack              WavPack\n A..... wmav1                Windows Media Audio 1\n A..... wmav2                Windows Media Audio 2\n S..... ssa                  ASS (Advanced SubStation Alpha) subtitle (codec ass)\n S..... ass                  ASS (Advanced SubStation Alpha) subtitle\n S..... dvbsub               DVB subtitles (codec dvb_subtitle)\n S..... dvdsub               DVD subtitles (codec dvd_subtitle)\n S..... mov_text             3GPP Timed Text subtitle\n S..... srt                  SubRip subtitle (codec subrip)\n S..... subrip               SubRip subtitle\n S..... text                 Raw text subtitle\n S..... ttml                 TTML subtitle\n S..... webvtt               WebVTT subtitle\n S..... xsub                 DivX subtitles (XSUB)",
        "h264_v4l2m2m": true,
        "h264_nvmpi": false,
        "h264_omx": true,
        "libx264": true,
        "aac": true
      },
      "devices": {
        "video": [
          "/dev/video0",
          "/dev/video1"
        ]
      }
    },
    "risk": [],
    "actions": [
      "Set YT_RTMP_URL environment variable"
    ]
  }
}